/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import com.bju.cps450.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAClass(AClass node);
    void caseAVarDecl(AVarDecl node);
    void caseAMethodDecl(AMethodDecl node);
    void caseAArgumentDeclList(AArgumentDeclList node);
    void caseAArgumentDecl(AArgumentDecl node);
    void caseAIntType(AIntType node);
    void caseAStringType(AStringType node);
    void caseABooleanType(ABooleanType node);
    void caseAIdType(AIdType node);
    void caseAArrayType(AArrayType node);
    void caseAStatementList(AStatementList node);
    void caseAAsgnStatement(AAsgnStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseALoopStatement(ALoopStatement node);
    void caseACallStatement(ACallStatement node);
    void caseAAssignmentStmt(AAssignmentStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseALoopStmt(ALoopStmt node);
    void caseACallStmt(ACallStmt node);
    void caseAExpressionList(AExpressionList node);
    void caseAExpression(AExpression node);
    void caseAOrExpressionLvl6(AOrExpressionLvl6 node);
    void caseAPassExpressionLvl6(APassExpressionLvl6 node);
    void caseAAndExpressionLvl5(AAndExpressionLvl5 node);
    void caseAPassExpressionLvl5(APassExpressionLvl5 node);
    void caseAQtExpressionLvl4(AQtExpressionLvl4 node);
    void caseAPassExpressionLvl4(APassExpressionLvl4 node);
    void caseAConcatExpressionLvlc(AConcatExpressionLvlc node);
    void caseAPassExpressionLvlc(APassExpressionLvlc node);
    void caseAAddExpressionLvl3(AAddExpressionLvl3 node);
    void caseASubExpressionLvl3(ASubExpressionLvl3 node);
    void caseAPassExpressionLvl3(APassExpressionLvl3 node);
    void caseAMulExpressionLvl2(AMulExpressionLvl2 node);
    void caseADivExpressionLvl2(ADivExpressionLvl2 node);
    void caseAPassExpressionLvl2(APassExpressionLvl2 node);
    void caseANotExpressionLvl1(ANotExpressionLvl1 node);
    void caseANegExpressionLvl1(ANegExpressionLvl1 node);
    void caseAPassExpressionLvl1(APassExpressionLvl1 node);
    void caseAIdentifierExpressionLvl0(AIdentifierExpressionLvl0 node);
    void caseAExpressionLvl0(AExpressionLvl0 node);
    void caseAStringExpressionLvl0(AStringExpressionLvl0 node);
    void caseAIntExpressionLvl0(AIntExpressionLvl0 node);
    void caseATrueExpressionLvl0(ATrueExpressionLvl0 node);
    void caseAFalseExpressionLvl0(AFalseExpressionLvl0 node);
    void caseANewObjExpressionLvl0(ANewObjExpressionLvl0 node);
    void caseAExprExpressionLvl0(AExprExpressionLvl0 node);
    void caseAParenexprExpressionLvl0(AParenexprExpressionLvl0 node);
    void caseAExprarrayExpressionLvl0(AExprarrayExpressionLvl0 node);
    void caseAMethodCallExpr(AMethodCallExpr node);
    void caseAMethodHeader(AMethodHeader node);
    void caseAMethodMiddle(AMethodMiddle node);
    void caseAMethodEnd(AMethodEnd node);
    void caseAExpressionListHelper(AExpressionListHelper node);
    void caseAExpressionHelper(AExpressionHelper node);
    void caseACallHelper(ACallHelper node);
    void caseAIfElse(AIfElse node);
    void caseAAssignmentHelper(AAssignmentHelper node);
    void caseAStatementListHelper(AStatementListHelper node);
    void caseAVarType(AVarType node);
    void caseAVarExp(AVarExp node);
    void caseAArgListHelper(AArgListHelper node);
    void caseAInheritsFrom(AInheritsFrom node);
    void caseAInnerClass(AInnerClass node);

    void caseTIgnoredNewline(TIgnoredNewline node);
    void caseTNewline(TNewline node);
    void caseTBlank(TBlank node);
    void caseTBoolean(TBoolean node);
    void caseTBegin(TBegin node);
    void caseTClassKey(TClassKey node);
    void caseTElse(TElse node);
    void caseTEnd(TEnd node);
    void caseTFalse(TFalse node);
    void caseTFrom(TFrom node);
    void caseTIf(TIf node);
    void caseTInherits(TInherits node);
    void caseTInt(TInt node);
    void caseTIs(TIs node);
    void caseTLoop(TLoop node);
    void caseTMe(TMe node);
    void caseTNew(TNew node);
    void caseTNull(TNull node);
    void caseTString(TString node);
    void caseTThen(TThen node);
    void caseTTrue(TTrue node);
    void caseTWhile(TWhile node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTIntLiteral(TIntLiteral node);
    void caseTStrStart(TStrStart node);
    void caseTStrIteral(TStrIteral node);
    void caseTUnterminatedStr(TUnterminatedStr node);
    void caseTIllegalStr(TIllegalStr node);
    void caseTStrconcat(TStrconcat node);
    void caseTAddition(TAddition node);
    void caseTSubtraction(TSubtraction node);
    void caseTMultiplication(TMultiplication node);
    void caseTDivision(TDivision node);
    void caseTComparison(TComparison node);
    void caseTAssignment(TAssignment node);
    void caseTLparen(TLparen node);
    void caseTRparen(TRparen node);
    void caseTLbrace(TLbrace node);
    void caseTRbrace(TRbrace node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTDot(TDot node);
    void caseTIdentifier(TIdentifier node);
    void caseTInvalidIdentifier(TInvalidIdentifier node);
    void caseTComment(TComment node);
    void caseTUnknown(TUnknown node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
