/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import java.util.*;
import com.bju.cps450.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClass(AClass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgumentDeclList(AArgumentDeclList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgumentDecl(AArgumentDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdType(AIdType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementList(AStatementList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAsgnStatement(AAsgnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoopStatement(ALoopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallStatement(ACallStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentStmt(AAssignmentStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoopStmt(ALoopStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallStmt(ACallStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionList(AExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpressionLvl6(AOrExpressionLvl6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl6(APassExpressionLvl6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpressionLvl5(AAndExpressionLvl5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl5(APassExpressionLvl5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqExpressionLvl4(AEqExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtExpressionLvl4(AGtExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteExpressionLvl4(AGteExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl4(APassExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConcatExpressionLvlc(AConcatExpressionLvlc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvlc(APassExpressionLvlc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddExpressionLvl3(AAddExpressionLvl3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubExpressionLvl3(ASubExpressionLvl3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl3(APassExpressionLvl3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulExpressionLvl2(AMulExpressionLvl2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpressionLvl2(ADivExpressionLvl2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl2(APassExpressionLvl2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExpressionLvl1(ANotExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddExpressionLvl1(AAddExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegExpressionLvl1(ANegExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl1(APassExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierExpressionLvl0(AIdentifierExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringExpressionLvl0(AStringExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntExpressionLvl0(AIntExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueExpressionLvl0(ATrueExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseExpressionLvl0(AFalseExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewObjExpressionLvl0(ANewObjExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMeExpressionLvl0(AMeExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprExpressionLvl0(AExprExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMcallExpressionLvl0(AMcallExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayExpressionLvl0(AArrayExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodHeader(AMethodHeader node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodMiddle(AMethodMiddle node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodEnd(AMethodEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionListHelper(AExpressionListHelper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionHelper(AExpressionHelper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallHelper(ACallHelper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElse(AIfElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementListHelper(AStatementListHelper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarType(AVarType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgListHelper(AArgListHelper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInheritsFrom(AInheritsFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInnerClass(AInnerClass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgnoredNewline(TIgnoredNewline node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNewline(TNewline node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClassKey(TClassKey node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInherits(TInherits node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIs(TIs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLoop(TLoop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMe(TMe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntLiteral(TIntLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStrStart(TStrStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStrIteral(TStrIteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnterminatedStr(TUnterminatedStr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIllegalStr(TIllegalStr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStrconcat(TStrconcat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAddition(TAddition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubtraction(TSubtraction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiplication(TMultiplication node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivision(TDivision node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterThan(TGreaterThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterEq(TGreaterEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssignment(TAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLbrace(TLbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRbrace(TRbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInvalidIdentifier(TInvalidIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnknown(TUnknown node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
