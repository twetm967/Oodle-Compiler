/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.lexer;

import java.io.*;
import com.bju.cps450.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.NORMAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.IN_STRING; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            @SuppressWarnings("hiding") Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            @SuppressWarnings("hiding") Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            @SuppressWarnings("hiding") Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            @SuppressWarnings("hiding") Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            @SuppressWarnings("hiding") Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            @SuppressWarnings("hiding") Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            @SuppressWarnings("hiding") Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            @SuppressWarnings("hiding") Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            @SuppressWarnings("hiding") Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            @SuppressWarnings("hiding") Token token = new49(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIgnoredNewline(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNewline(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBoolean(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBegin(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TClassKey(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TElse(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEnd(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFalse(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFrom(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIf(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInherits(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInt(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIs(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLoop(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMe(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNew(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNull(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TThen(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTrue(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhile(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAnd(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOr(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNot(line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIntLiteral(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStrStart(line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStrIteral(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUnterminatedStr(text, line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIllegalStr(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStrconcat(line, pos); }
    Token new31(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAddition(line, pos); }
    Token new32(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSubtraction(line, pos); }
    Token new33(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMultiplication(line, pos); }
    Token new34(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDivision(line, pos); }
    Token new35(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEqual(line, pos); }
    Token new36(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGreaterThan(line, pos); }
    Token new37(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGreaterEq(line, pos); }
    Token new38(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAssignment(line, pos); }
    Token new39(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLparen(line, pos); }
    Token new40(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRparen(line, pos); }
    Token new41(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLbrace(line, pos); }
    Token new42(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRbrace(line, pos); }
    Token new43(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new44(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(line, pos); }
    Token new45(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColon(line, pos); }
    Token new46(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new47(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new48(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComment(text, line, pos); }
    Token new49(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUnknown(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // NORMAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 33, 1}, {34, 34, 6}, {35, 37, 1}, {38, 38, 7}, {39, 39, 1}, {40, 40, 8}, {41, 41, 9}, {42, 42, 10}, {43, 43, 11}, {44, 44, 12}, {45, 45, 13}, {46, 46, 14}, {47, 47, 15}, {48, 57, 16}, {58, 58, 17}, {59, 59, 18}, {60, 60, 1}, {61, 61, 19}, {62, 62, 20}, {63, 64, 1}, {65, 90, 21}, {91, 91, 22}, {92, 92, 1}, {93, 93, 23}, {94, 94, 1}, {95, 95, 24}, {96, 96, 1}, {97, 97, 25}, {98, 98, 26}, {99, 99, 27}, {100, 100, 21}, {101, 101, 28}, {102, 102, 29}, {103, 104, 21}, {105, 105, 30}, {106, 107, 21}, {108, 108, 31}, {109, 109, 32}, {110, 110, 33}, {111, 111, 34}, {112, 114, 21}, {115, 115, 35}, {116, 116, 36}, {117, 118, 21}, {119, 119, 37}, {120, 122, 21}, {123, 125, 1}, {126, 126, 38}, {127, 65535, 1}, },
            {},
            {},
            {},
            {{10, 10, 39}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 40}, },
            {{61, 61, 41}, },
            {},
            {},
            {{61, 61, 42}, },
            {{48, 57, 43}, {65, 90, 44}, {95, 95, 45}, {97, 122, 44}, },
            {},
            {},
            {{10, 10, 46}, {13, 13, 47}, {48, 122, -23}, },
            {{48, 95, -23}, {97, 109, 44}, {110, 110, 48}, {111, 122, 44}, },
            {{48, 95, -23}, {97, 100, 44}, {101, 101, 49}, {102, 110, 44}, {111, 111, 50}, {112, 122, 44}, },
            {{48, 95, -23}, {97, 107, 44}, {108, 108, 51}, {109, 122, 44}, },
            {{48, 107, -29}, {108, 108, 52}, {109, 109, 44}, {110, 110, 53}, {111, 122, 44}, },
            {{48, 95, -23}, {97, 97, 54}, {98, 113, 44}, {114, 114, 55}, {115, 122, 44}, },
            {{48, 95, -23}, {97, 101, 44}, {102, 102, 56}, {103, 109, 44}, {110, 110, 57}, {111, 114, 44}, {115, 115, 58}, {116, 122, 44}, },
            {{48, 95, -23}, {97, 110, 44}, {111, 111, 59}, {112, 122, 44}, },
            {{48, 100, -28}, {101, 101, 60}, {102, 122, 44}, },
            {{48, 100, -28}, {101, 101, 61}, {102, 110, 44}, {111, 111, 62}, {112, 116, 44}, {117, 117, 63}, {118, 122, 44}, },
            {{48, 95, -23}, {97, 113, 44}, {114, 114, 64}, {115, 122, 44}, },
            {{48, 95, -23}, {97, 115, 44}, {116, 116, 65}, {117, 122, 44}, },
            {{48, 95, -23}, {97, 103, 44}, {104, 104, 66}, {105, 113, 44}, {114, 114, 67}, {115, 122, 44}, },
            {{48, 103, -38}, {104, 104, 68}, {105, 122, 44}, },
            {{0, 9, 69}, {11, 12, 69}, {14, 65535, 69}, },
            {},
            {{48, 57, 40}, },
            {},
            {},
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {},
            {{10, 10, 70}, },
            {{48, 95, -23}, {97, 99, 44}, {100, 100, 71}, {101, 122, 44}, },
            {{48, 95, -23}, {97, 102, 44}, {103, 103, 72}, {104, 122, 44}, },
            {{48, 110, -33}, {111, 111, 73}, {112, 122, 44}, },
            {{48, 95, -23}, {97, 97, 74}, {98, 122, 44}, },
            {{48, 95, -23}, {97, 114, 44}, {115, 115, 75}, {116, 122, 44}, },
            {{48, 99, -50}, {100, 100, 76}, {101, 122, 44}, },
            {{48, 107, -29}, {108, 108, 77}, {109, 122, 44}, },
            {{48, 110, -33}, {111, 111, 78}, {112, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 103, -38}, {104, 104, 79}, {105, 115, 44}, {116, 116, 80}, {117, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 110, -33}, {111, 111, 81}, {112, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 95, -23}, {97, 118, 44}, {119, 119, 82}, {120, 122, 44}, },
            {{48, 115, -37}, {116, 116, 83}, {117, 122, 44}, },
            {{48, 107, -29}, {108, 108, 84}, {109, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 113, -36}, {114, 114, 85}, {115, 122, 44}, },
            {{48, 100, -28}, {101, 101, 86}, {102, 122, 44}, },
            {{48, 95, -23}, {97, 116, 44}, {117, 117, 87}, {118, 122, 44}, },
            {{48, 95, -23}, {97, 104, 44}, {105, 105, 88}, {106, 122, 44}, },
            {{0, 65535, -40}, },
            {},
            {{48, 122, -23}, },
            {{48, 104, -70}, {105, 105, 89}, {106, 122, 44}, },
            {{48, 107, -29}, {108, 108, 90}, {109, 122, 44}, },
            {{48, 114, -54}, {115, 115, 91}, {116, 122, 44}, },
            {{48, 100, -28}, {101, 101, 92}, {102, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 114, -54}, {115, 115, 93}, {116, 122, 44}, },
            {{48, 95, -23}, {97, 108, 44}, {109, 109, 94}, {110, 122, 44}, },
            {{48, 100, -28}, {101, 101, 95}, {102, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 95, -23}, {97, 111, 44}, {112, 112, 96}, {113, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 107, -29}, {108, 108, 97}, {109, 122, 44}, },
            {{48, 104, -70}, {105, 105, 98}, {106, 122, 44}, },
            {{48, 109, -27}, {110, 110, 99}, {111, 122, 44}, },
            {{48, 100, -28}, {101, 101, 100}, {102, 122, 44}, },
            {{48, 107, -29}, {108, 108, 101}, {109, 122, 44}, },
            {{48, 109, -27}, {110, 110, 102}, {111, 122, 44}, },
            {{48, 100, -28}, {101, 101, 103}, {102, 122, 44}, },
            {{48, 114, -54}, {115, 115, 104}, {116, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 100, -28}, {101, 101, 105}, {102, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 113, -36}, {114, 114, 106}, {115, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 109, -27}, {110, 110, 107}, {111, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 100, -28}, {101, 101, 108}, {102, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 95, -23}, {97, 97, 109}, {98, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 104, -70}, {105, 105, 110}, {106, 122, 44}, },
            {{48, 102, -51}, {103, 103, 111}, {104, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 109, -27}, {110, 110, 112}, {111, 122, 44}, },
            {{48, 115, -37}, {116, 116, 113}, {117, 122, 44}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 114, -54}, {115, 115, 114}, {116, 122, 44}, },
            {{48, 122, -23}, },
        }
        { // IN_COMMENT
            {{0, 8, 1}, {9, 9, 2}, {10, 31, 1}, {32, 32, 3}, {33, 37, 1}, {38, 38, 4}, {39, 39, 1}, {40, 40, 5}, {41, 41, 6}, {42, 42, 7}, {43, 43, 8}, {44, 44, 9}, {45, 45, 10}, {46, 46, 11}, {47, 47, 12}, {48, 57, 13}, {58, 58, 14}, {59, 59, 15}, {60, 60, 1}, {61, 61, 16}, {62, 62, 17}, {63, 64, 1}, {65, 90, 18}, {91, 91, 19}, {92, 92, 1}, {93, 93, 20}, {94, 94, 1}, {95, 95, 21}, {96, 96, 1}, {97, 97, 22}, {98, 98, 23}, {99, 99, 24}, {100, 100, 18}, {101, 101, 25}, {102, 102, 26}, {103, 104, 18}, {105, 105, 27}, {106, 107, 18}, {108, 108, 28}, {109, 109, 29}, {110, 110, 30}, {111, 111, 31}, {112, 114, 18}, {115, 115, 32}, {116, 116, 33}, {117, 118, 18}, {119, 119, 34}, {120, 122, 18}, {123, 125, 1}, {126, 126, 35}, {127, 65535, 1}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 36}, },
            {{61, 61, 37}, },
            {},
            {},
            {{61, 61, 38}, },
            {{48, 57, 39}, {65, 90, 40}, {95, 95, 41}, {97, 122, 40}, },
            {},
            {},
            {{10, 10, 42}, {13, 13, 43}, {48, 122, -20}, },
            {{48, 95, -20}, {97, 109, 40}, {110, 110, 44}, {111, 122, 40}, },
            {{48, 95, -20}, {97, 100, 40}, {101, 101, 45}, {102, 110, 40}, {111, 111, 46}, {112, 122, 40}, },
            {{48, 95, -20}, {97, 107, 40}, {108, 108, 47}, {109, 122, 40}, },
            {{48, 107, -26}, {108, 108, 48}, {109, 109, 40}, {110, 110, 49}, {111, 122, 40}, },
            {{48, 95, -20}, {97, 97, 50}, {98, 113, 40}, {114, 114, 51}, {115, 122, 40}, },
            {{48, 95, -20}, {97, 101, 40}, {102, 102, 52}, {103, 109, 40}, {110, 110, 53}, {111, 114, 40}, {115, 115, 54}, {116, 122, 40}, },
            {{48, 95, -20}, {97, 110, 40}, {111, 111, 55}, {112, 122, 40}, },
            {{48, 100, -25}, {101, 101, 56}, {102, 122, 40}, },
            {{48, 100, -25}, {101, 101, 57}, {102, 110, 40}, {111, 111, 58}, {112, 116, 40}, {117, 117, 59}, {118, 122, 40}, },
            {{48, 95, -20}, {97, 113, 40}, {114, 114, 60}, {115, 122, 40}, },
            {{48, 95, -20}, {97, 115, 40}, {116, 116, 61}, {117, 122, 40}, },
            {{48, 95, -20}, {97, 103, 40}, {104, 104, 62}, {105, 113, 40}, {114, 114, 63}, {115, 122, 40}, },
            {{48, 103, -35}, {104, 104, 64}, {105, 122, 40}, },
            {{0, 9, 65}, {11, 12, 65}, {14, 65535, 65}, },
            {{48, 57, 36}, },
            {},
            {},
            {{48, 122, -20}, },
            {{48, 122, -20}, },
            {{48, 122, -20}, },
            {},
            {{10, 10, 66}, },
            {{48, 95, -20}, {97, 99, 40}, {100, 100, 67}, {101, 122, 40}, },
            {{48, 95, -20}, {97, 102, 40}, {103, 103, 68}, {104, 122, 40}, },
            {{48, 110, -30}, {111, 111, 69}, {112, 122, 40}, },
            {{48, 95, -20}, {97, 97, 70}, {98, 122, 40}, },
            {{48, 95, -20}, {97, 114, 40}, {115, 115, 71}, {116, 122, 40}, },
            {{48, 99, -46}, {100, 100, 72}, {101, 122, 40}, },
            {{48, 107, -26}, {108, 108, 73}, {109, 122, 40}, },
            {{48, 110, -30}, {111, 111, 74}, {112, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 103, -35}, {104, 104, 75}, {105, 115, 40}, {116, 116, 76}, {117, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 110, -30}, {111, 111, 77}, {112, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 95, -20}, {97, 118, 40}, {119, 119, 78}, {120, 122, 40}, },
            {{48, 115, -34}, {116, 116, 79}, {117, 122, 40}, },
            {{48, 107, -26}, {108, 108, 80}, {109, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 113, -33}, {114, 114, 81}, {115, 122, 40}, },
            {{48, 100, -25}, {101, 101, 82}, {102, 122, 40}, },
            {{48, 95, -20}, {97, 116, 40}, {117, 117, 83}, {118, 122, 40}, },
            {{48, 95, -20}, {97, 104, 40}, {105, 105, 84}, {106, 122, 40}, },
            {{0, 65535, -37}, },
            {},
            {{48, 122, -20}, },
            {{48, 104, -66}, {105, 105, 85}, {106, 122, 40}, },
            {{48, 107, -26}, {108, 108, 86}, {109, 122, 40}, },
            {{48, 114, -50}, {115, 115, 87}, {116, 122, 40}, },
            {{48, 100, -25}, {101, 101, 88}, {102, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 114, -50}, {115, 115, 89}, {116, 122, 40}, },
            {{48, 95, -20}, {97, 108, 40}, {109, 109, 90}, {110, 122, 40}, },
            {{48, 100, -25}, {101, 101, 91}, {102, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 95, -20}, {97, 111, 40}, {112, 112, 92}, {113, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 122, -20}, },
            {{48, 107, -26}, {108, 108, 93}, {109, 122, 40}, },
            {{48, 104, -66}, {105, 105, 94}, {106, 122, 40}, },
            {{48, 109, -24}, {110, 110, 95}, {111, 122, 40}, },
            {{48, 100, -25}, {101, 101, 96}, {102, 122, 40}, },
            {{48, 107, -26}, {108, 108, 97}, {109, 122, 40}, },
            {{48, 109, -24}, {110, 110, 98}, {111, 122, 40}, },
            {{48, 100, -25}, {101, 101, 99}, {102, 122, 40}, },
            {{48, 114, -50}, {115, 115, 100}, {116, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 100, -25}, {101, 101, 101}, {102, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 113, -33}, {114, 114, 102}, {115, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 122, -20}, },
            {{48, 109, -24}, {110, 110, 103}, {111, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 122, -20}, },
            {{48, 100, -25}, {101, 101, 104}, {102, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 95, -20}, {97, 97, 105}, {98, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 122, -20}, },
            {{48, 104, -66}, {105, 105, 106}, {106, 122, 40}, },
            {{48, 102, -47}, {103, 103, 107}, {104, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 109, -24}, {110, 110, 108}, {111, 122, 40}, },
            {{48, 115, -34}, {116, 116, 109}, {117, 122, 40}, },
            {{48, 122, -20}, },
            {{48, 122, -20}, },
            {{48, 114, -50}, {115, 115, 110}, {116, 122, 40}, },
            {{48, 122, -20}, },
        }
        { // IN_STRING
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 33, 1}, {34, 34, 6}, {35, 37, 1}, {38, 38, 7}, {39, 39, 1}, {40, 40, 8}, {41, 41, 9}, {42, 42, 10}, {43, 43, 11}, {44, 44, 12}, {45, 45, 13}, {46, 46, 14}, {47, 47, 15}, {48, 57, 16}, {58, 58, 17}, {59, 59, 18}, {60, 60, 1}, {61, 61, 19}, {62, 62, 20}, {63, 64, 1}, {65, 90, 21}, {91, 91, 22}, {92, 92, 23}, {93, 93, 24}, {94, 94, 1}, {95, 95, 25}, {96, 96, 1}, {97, 97, 26}, {98, 98, 27}, {99, 99, 28}, {100, 100, 21}, {101, 101, 29}, {102, 102, 30}, {103, 104, 21}, {105, 105, 31}, {106, 107, 21}, {108, 108, 32}, {109, 109, 33}, {110, 110, 34}, {111, 111, 35}, {112, 114, 21}, {115, 115, 36}, {116, 116, 37}, {117, 118, 21}, {119, 119, 38}, {120, 122, 21}, {123, 125, 1}, {126, 126, 39}, {127, 255, 1}, {256, 65535, 40}, },
            {{0, 9, 41}, {10, 10, 42}, {11, 12, 41}, {13, 13, 43}, {14, 33, 41}, {34, 34, 44}, {35, 91, 41}, {92, 92, 45}, {93, 255, 41}, },
            {{0, 255, -3}, },
            {},
            {{10, 10, 46}, },
            {{0, 255, -3}, },
            {},
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 34, -3}, {35, 47, 41}, {48, 57, 47}, {58, 91, 41}, {92, 255, -3}, },
            {{0, 34, -3}, {35, 60, 41}, {61, 61, 48}, {62, 91, 41}, {92, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 60, -19}, {61, 61, 49}, {62, 255, -19}, },
            {{0, 47, -18}, {48, 57, 50}, {58, 64, 41}, {65, 90, 51}, {91, 91, 41}, {92, 92, 45}, {93, 94, 41}, {95, 95, 52}, {96, 96, 41}, {97, 122, 51}, {123, 255, 41}, },
            {{0, 255, -3}, },
            {{0, 9, 53}, {11, 12, 53}, {14, 33, 53}, {34, 34, 54}, {35, 47, 53}, {48, 55, 55}, {56, 91, 53}, {92, 92, 56}, {93, 101, 53}, {102, 102, 57}, {103, 109, 53}, {110, 110, 58}, {111, 113, 53}, {114, 114, 59}, {115, 115, 53}, {116, 116, 60}, {117, 255, 53}, },
            {{0, 255, -3}, },
            {{0, 9, 41}, {10, 10, 61}, {11, 12, 41}, {13, 13, 62}, {14, 255, -23}, },
            {{0, 96, -23}, {97, 109, 51}, {110, 110, 63}, {111, 122, 51}, {123, 255, 41}, },
            {{0, 96, -23}, {97, 100, 51}, {101, 101, 64}, {102, 110, 51}, {111, 111, 65}, {112, 122, 51}, {123, 255, 41}, },
            {{0, 96, -23}, {97, 107, 51}, {108, 108, 66}, {109, 122, 51}, {123, 255, 41}, },
            {{0, 107, -30}, {108, 108, 67}, {109, 109, 51}, {110, 110, 68}, {111, 255, -28}, },
            {{0, 96, -23}, {97, 97, 69}, {98, 113, 51}, {114, 114, 70}, {115, 122, 51}, {123, 255, 41}, },
            {{0, 96, -23}, {97, 101, 51}, {102, 102, 71}, {103, 109, 51}, {110, 110, 72}, {111, 114, 51}, {115, 115, 73}, {116, 122, 51}, {123, 255, 41}, },
            {{0, 96, -23}, {97, 110, 51}, {111, 111, 74}, {112, 255, -29}, },
            {{0, 100, -29}, {101, 101, 75}, {102, 122, 51}, {123, 255, 41}, },
            {{0, 100, -29}, {101, 101, 76}, {102, 110, 51}, {111, 111, 77}, {112, 116, 51}, {117, 117, 78}, {118, 122, 51}, {123, 255, 41}, },
            {{0, 96, -23}, {97, 113, 51}, {114, 114, 79}, {115, 255, -32}, },
            {{0, 96, -23}, {97, 115, 51}, {116, 116, 80}, {117, 122, 51}, {123, 255, 41}, },
            {{0, 96, -23}, {97, 103, 51}, {104, 104, 81}, {105, 113, 51}, {114, 114, 82}, {115, 255, -32}, },
            {{0, 103, -39}, {104, 104, 83}, {105, 122, 51}, {123, 255, 41}, },
            {{0, 9, 84}, {10, 10, 42}, {11, 12, 84}, {13, 13, 43}, {14, 33, 84}, {34, 34, 85}, {35, 91, 84}, {92, 92, 86}, {93, 255, 84}, {256, 65535, 87}, },
            {},
            {{0, 255, -3}, },
            {},
            {{10, 10, 46}, },
            {},
            {{0, 255, -25}, },
            {},
            {{0, 255, -18}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -23}, },
            {{0, 255, -23}, },
            {{0, 255, -23}, },
            {{0, 33, -25}, {34, 34, 88}, {35, 91, 53}, {92, 92, 89}, {93, 255, 53}, },
            {{0, 255, -3}, },
            {{0, 34, -55}, {35, 47, 53}, {48, 55, 90}, {56, 91, 53}, {92, 255, -55}, },
            {{0, 33, -3}, {34, 34, 91}, {35, 47, 41}, {48, 55, 92}, {56, 91, 41}, {92, 92, 93}, {93, 101, 41}, {102, 102, 94}, {103, 109, 41}, {110, 110, 95}, {111, 113, 41}, {114, 114, 96}, {115, 115, 41}, {116, 116, 97}, {117, 255, 41}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {},
            {{10, 10, 98}, },
            {{0, 96, -23}, {97, 99, 51}, {100, 100, 99}, {101, 122, 51}, {123, 255, 41}, },
            {{0, 96, -23}, {97, 102, 51}, {103, 103, 100}, {104, 122, 51}, {123, 255, 41}, },
            {{0, 110, -34}, {111, 111, 101}, {112, 255, -29}, },
            {{0, 96, -23}, {97, 97, 102}, {98, 122, 51}, {123, 255, 41}, },
            {{0, 96, -23}, {97, 114, 51}, {115, 115, 103}, {116, 255, -33}, },
            {{0, 99, -65}, {100, 100, 104}, {101, 255, -65}, },
            {{0, 107, -30}, {108, 108, 105}, {109, 255, -30}, },
            {{0, 110, -34}, {111, 111, 106}, {112, 255, -29}, },
            {{0, 255, -23}, },
            {{0, 103, -39}, {104, 104, 107}, {105, 115, 51}, {116, 116, 108}, {117, 255, -38}, },
            {{0, 255, -23}, },
            {{0, 110, -34}, {111, 111, 109}, {112, 255, -29}, },
            {{0, 255, -23}, },
            {{0, 96, -23}, {97, 118, 51}, {119, 119, 110}, {120, 122, 51}, {123, 255, 41}, },
            {{0, 115, -38}, {116, 116, 111}, {117, 255, -38}, },
            {{0, 107, -30}, {108, 108, 112}, {109, 255, -30}, },
            {{0, 255, -23}, },
            {{0, 113, -37}, {114, 114, 113}, {115, 255, -32}, },
            {{0, 100, -29}, {101, 101, 114}, {102, 255, -35}, },
            {{0, 96, -23}, {97, 116, 51}, {117, 117, 115}, {118, 255, -36}, },
            {{0, 96, -23}, {97, 104, 51}, {105, 105, 116}, {106, 122, 51}, {123, 255, 41}, },
            {{0, 65535, -41}, },
            {{0, 9, 87}, {11, 12, 87}, {14, 65535, 87}, },
            {{0, 9, 117}, {11, 12, 117}, {14, 33, 117}, {34, 34, 118}, {35, 47, 117}, {48, 55, 119}, {56, 91, 117}, {92, 92, 120}, {93, 101, 117}, {102, 102, 121}, {103, 109, 117}, {110, 110, 122}, {111, 113, 117}, {114, 114, 123}, {115, 115, 117}, {116, 116, 124}, {117, 255, 117}, {256, 65535, 87}, },
            {{0, 65535, -87}, },
            {},
            {{0, 33, -25}, {34, 34, 125}, {35, 47, 53}, {48, 55, 126}, {56, 91, 53}, {92, 92, 127}, {93, 101, 53}, {102, 102, 128}, {103, 109, 53}, {110, 110, 129}, {111, 113, 53}, {114, 114, 130}, {115, 115, 53}, {116, 116, 131}, {117, 255, 53}, },
            {{0, 47, -57}, {48, 55, 132}, {56, 255, -57}, },
            {{0, 255, -55}, },
            {{0, 47, -18}, {48, 55, 133}, {56, 91, 41}, {92, 255, -3}, },
            {{0, 255, -25}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {{0, 255, -3}, },
            {},
            {{0, 255, -23}, },
            {{0, 104, -85}, {105, 105, 134}, {106, 255, -85}, },
            {{0, 107, -30}, {108, 108, 135}, {109, 255, -30}, },
            {{0, 114, -69}, {115, 115, 136}, {116, 255, -33}, },
            {{0, 100, -29}, {101, 101, 137}, {102, 255, -35}, },
            {{0, 255, -23}, },
            {{0, 114, -69}, {115, 115, 138}, {116, 255, -33}, },
            {{0, 96, -23}, {97, 108, 51}, {109, 109, 139}, {110, 122, 51}, {123, 255, 41}, },
            {{0, 100, -29}, {101, 101, 140}, {102, 255, -35}, },
            {{0, 255, -23}, },
            {{0, 96, -23}, {97, 111, 51}, {112, 112, 141}, {113, 122, 51}, {123, 255, 41}, },
            {{0, 255, -23}, },
            {{0, 255, -23}, },
            {{0, 107, -30}, {108, 108, 142}, {109, 255, -30}, },
            {{0, 104, -85}, {105, 105, 143}, {106, 255, -85}, },
            {{0, 109, -28}, {110, 110, 144}, {111, 255, -28}, },
            {{0, 100, -29}, {101, 101, 145}, {102, 255, -35}, },
            {{0, 107, -30}, {108, 108, 146}, {109, 255, -30}, },
            {{0, 33, -88}, {34, 34, 147}, {35, 91, 117}, {92, 92, 148}, {93, 255, 117}, {256, 65535, 87}, },
            {{0, 65535, -41}, },
            {{0, 34, -119}, {35, 47, 117}, {48, 55, 149}, {56, 91, 117}, {92, 65535, -119}, },
            {{0, 33, -41}, {34, 34, 150}, {35, 47, 84}, {48, 55, 151}, {56, 91, 84}, {92, 92, 152}, {93, 101, 84}, {102, 102, 153}, {103, 109, 84}, {110, 110, 154}, {111, 113, 84}, {114, 114, 155}, {115, 115, 84}, {116, 116, 156}, {117, 255, 84}, {256, 65535, 87}, },
            {{0, 65535, -41}, },
            {{0, 65535, -41}, },
            {{0, 65535, -41}, },
            {{0, 65535, -41}, },
            {{0, 255, -55}, },
            {{0, 47, -57}, {48, 55, 157}, {56, 255, -57}, },
            {{0, 255, -91}, },
            {{0, 255, -55}, },
            {{0, 255, -55}, },
            {{0, 255, -55}, },
            {{0, 255, -55}, },
            {{0, 255, -3}, },
            {{0, 47, -18}, {48, 55, 158}, {56, 255, -94}, },
            {{0, 109, -28}, {110, 110, 159}, {111, 255, -28}, },
            {{0, 100, -29}, {101, 101, 160}, {102, 255, -35}, },
            {{0, 114, -69}, {115, 115, 161}, {116, 255, -33}, },
            {{0, 255, -23}, },
            {{0, 100, -29}, {101, 101, 162}, {102, 255, -35}, },
            {{0, 255, -23}, },
            {{0, 113, -37}, {114, 114, 163}, {115, 255, -32}, },
            {{0, 255, -23}, },
            {{0, 255, -23}, },
            {{0, 109, -28}, {110, 110, 164}, {111, 255, -28}, },
            {{0, 255, -23}, },
            {{0, 255, -23}, },
            {{0, 100, -29}, {101, 101, 165}, {102, 255, -35}, },
            {{0, 65535, -87}, },
            {{0, 33, -88}, {34, 34, 166}, {35, 47, 117}, {48, 55, 167}, {56, 91, 117}, {92, 92, 168}, {93, 101, 117}, {102, 102, 169}, {103, 109, 117}, {110, 110, 170}, {111, 113, 117}, {114, 114, 171}, {115, 115, 117}, {116, 116, 172}, {117, 65535, -88}, },
            {{0, 47, -121}, {48, 55, 173}, {56, 65535, -121}, },
            {{0, 65535, -119}, },
            {{0, 34, -41}, {35, 47, 84}, {48, 55, 174}, {56, 91, 84}, {92, 65535, -41}, },
            {{0, 65535, -88}, },
            {{0, 65535, -41}, },
            {{0, 65535, -41}, },
            {{0, 65535, -41}, },
            {{0, 65535, -41}, },
            {{0, 47, -57}, {48, 55, 175}, {56, 255, -57}, },
            {{0, 255, -3}, },
            {{0, 255, -23}, },
            {{0, 96, -23}, {97, 97, 176}, {98, 255, -68}, },
            {{0, 255, -23}, },
            {{0, 255, -23}, },
            {{0, 104, -85}, {105, 105, 177}, {106, 255, -85}, },
            {{0, 102, -66}, {103, 103, 178}, {104, 255, -66}, },
            {{0, 255, -23}, },
            {{0, 65535, -119}, },
            {{0, 47, -121}, {48, 55, 179}, {56, 65535, -121}, },
            {{0, 65535, -150}, },
            {{0, 65535, -119}, },
            {{0, 65535, -119}, },
            {{0, 65535, -119}, },
            {{0, 65535, -119}, },
            {{0, 65535, -41}, },
            {{0, 47, -153}, {48, 55, 180}, {56, 65535, -153}, },
            {{0, 255, -55}, },
            {{0, 109, -28}, {110, 110, 181}, {111, 255, -28}, },
            {{0, 115, -38}, {116, 116, 182}, {117, 255, -38}, },
            {{0, 255, -23}, },
            {{0, 47, -121}, {48, 55, 183}, {56, 65535, -121}, },
            {{0, 65535, -41}, },
            {{0, 255, -23}, },
            {{0, 114, -69}, {115, 115, 184}, {116, 255, -33}, },
            {{0, 65535, -119}, },
            {{0, 255, -23}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // NORMAL
        {-1, 49, 2, 1, 1, 2, 26, 30, 39, 40, 33, 31, 43, 32, 46, 34, 25, 45, 44, 35, 36, 47, 41, 42, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 1, 25, 38, 37, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 10, 47, 13, 47, 15, 47, 47, 47, 23, 47, 47, 47, 47, 48, 0, 22, 47, 47, 47, 47, 7, 47, 47, 47, 12, 47, 16, 24, 47, 47, 47, 47, 47, 47, 47, 47, 6, 47, 9, 47, 14, 17, 47, 19, 20, 47, 4, 47, 5, 8, 47, 47, 21, 47, 47, 18, 3, 47, 11, },
        // IN_COMMENT
        {-1, 49, 2, 2, 30, 39, 40, 33, 31, 43, 32, 46, 34, 25, 45, 44, 35, 36, 47, 41, 42, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 25, 38, 37, 47, 47, 47, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 10, 47, 13, 47, 15, 47, 47, 47, 23, 47, 47, 47, 47, 48, 0, 22, 47, 47, 47, 47, 7, 47, 47, 47, 12, 47, 16, 24, 47, 47, 47, 47, 47, 47, 47, 47, 6, 47, 9, 47, 14, 17, 47, 19, 20, 47, 4, 47, 5, 8, 47, 47, 21, 47, 47, 18, 3, 47, 11, },
        // IN_STRING
        {-1, 49, 2, 28, 28, 2, 27, 30, 39, 40, 33, 31, 43, 32, 46, 34, 25, 45, 44, 35, 36, 47, 41, 49, 42, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, -1, 28, 28, 27, -1, 28, 25, 38, 37, 47, 47, 47, -1, 29, -1, -1, -1, -1, -1, -1, 0, 0, 47, 47, 47, 47, 47, 47, 47, 47, 10, 47, 13, 47, 15, 47, 47, 47, 23, 47, 47, 47, 47, 48, 27, 48, 48, 29, -1, -1, 27, -1, -1, -1, -1, -1, -1, 0, 22, 47, 47, 47, 47, 7, 47, 47, 47, 12, 47, 16, 24, 47, 47, 47, 47, 47, 48, 29, 48, 48, 48, 48, 48, 48, 29, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, 47, 6, 47, 9, 47, 14, 17, 47, 19, 20, 47, 29, 48, 48, 27, 48, 48, 48, 48, 48, 48, -1, -1, 4, 47, 5, 8, 47, 47, 21, 29, 48, 48, 48, 48, 48, 48, 48, 48, -1, 47, 47, 18, 48, 48, 3, 47, 48, 11, },

    };*/

    public static class State
    {
        public final static State NORMAL = new State(0);
        public final static State IN_COMMENT = new State(1);
        public final static State IN_STRING = new State(2);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
