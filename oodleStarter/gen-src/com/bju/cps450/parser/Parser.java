/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.parser;

import com.bju.cps450.lexer.*;
import com.bju.cps450.node.*;
import com.bju.cps450.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAstart3Start */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAstart4Start */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAstart5Start */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list);
            }
            break;
            case 5: /* reduce AAstart6Start */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list);
            }
            break;
            case 6: /* reduce AAstart7Start */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list);
            }
            break;
            case 7: /* reduce AAstart8Start */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list);
            }
            break;
            case 8: /* reduce AAclassp1ClassP */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list);
            }
            break;
            case 9: /* reduce AAclassp2ClassP */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list);
            }
            break;
            case 10: /* reduce AAclassp3ClassP */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list);
            }
            break;
            case 11: /* reduce AAclassp4ClassP */
            {
                ArrayList<Object> list = new11();
                push(goTo(1), list);
            }
            break;
            case 12: /* reduce AAclassp5ClassP */
            {
                ArrayList<Object> list = new12();
                push(goTo(1), list);
            }
            break;
            case 13: /* reduce AAclassp6ClassP */
            {
                ArrayList<Object> list = new13();
                push(goTo(1), list);
            }
            break;
            case 14: /* reduce AAclassp7ClassP */
            {
                ArrayList<Object> list = new14();
                push(goTo(1), list);
            }
            break;
            case 15: /* reduce AAclassp8ClassP */
            {
                ArrayList<Object> list = new15();
                push(goTo(1), list);
            }
            break;
            case 16: /* reduce AAvardecl1VarDecl */
            {
                ArrayList<Object> list = new16();
                push(goTo(2), list);
            }
            break;
            case 17: /* reduce AAvardecl2VarDecl */
            {
                ArrayList<Object> list = new17();
                push(goTo(2), list);
            }
            break;
            case 18: /* reduce AAvardecl3VarDecl */
            {
                ArrayList<Object> list = new18();
                push(goTo(2), list);
            }
            break;
            case 19: /* reduce AAvardecl4VarDecl */
            {
                ArrayList<Object> list = new19();
                push(goTo(2), list);
            }
            break;
            case 20: /* reduce AAmethoddecl1MethodDecl */
            {
                ArrayList<Object> list = new20();
                push(goTo(3), list);
            }
            break;
            case 21: /* reduce AAmethoddecl2MethodDecl */
            {
                ArrayList<Object> list = new21();
                push(goTo(3), list);
            }
            break;
            case 22: /* reduce AAmethoddecl3MethodDecl */
            {
                ArrayList<Object> list = new22();
                push(goTo(3), list);
            }
            break;
            case 23: /* reduce AAmethoddecl4MethodDecl */
            {
                ArrayList<Object> list = new23();
                push(goTo(3), list);
            }
            break;
            case 24: /* reduce AAmethoddecl5MethodDecl */
            {
                ArrayList<Object> list = new24();
                push(goTo(3), list);
            }
            break;
            case 25: /* reduce AAmethoddecl6MethodDecl */
            {
                ArrayList<Object> list = new25();
                push(goTo(3), list);
            }
            break;
            case 26: /* reduce AAmethoddecl7MethodDecl */
            {
                ArrayList<Object> list = new26();
                push(goTo(3), list);
            }
            break;
            case 27: /* reduce AAmethoddecl8MethodDecl */
            {
                ArrayList<Object> list = new27();
                push(goTo(3), list);
            }
            break;
            case 28: /* reduce AAargumentdecllist1ArgumentDeclList */
            {
                ArrayList<Object> list = new28();
                push(goTo(4), list);
            }
            break;
            case 29: /* reduce AAargumentdecllist2ArgumentDeclList */
            {
                ArrayList<Object> list = new29();
                push(goTo(4), list);
            }
            break;
            case 30: /* reduce AArgumentDecl */
            {
                ArrayList<Object> list = new30();
                push(goTo(5), list);
            }
            break;
            case 31: /* reduce AIntType */
            {
                ArrayList<Object> list = new31();
                push(goTo(6), list);
            }
            break;
            case 32: /* reduce AStringType */
            {
                ArrayList<Object> list = new32();
                push(goTo(6), list);
            }
            break;
            case 33: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new33();
                push(goTo(6), list);
            }
            break;
            case 34: /* reduce AIdType */
            {
                ArrayList<Object> list = new34();
                push(goTo(6), list);
            }
            break;
            case 35: /* reduce AAarraytype1Type */
            {
                ArrayList<Object> list = new35();
                push(goTo(6), list);
            }
            break;
            case 36: /* reduce AAarraytype2Type */
            {
                ArrayList<Object> list = new36();
                push(goTo(6), list);
            }
            break;
            case 37: /* reduce AAstatementlist1StatementList */
            {
                ArrayList<Object> list = new37();
                push(goTo(7), list);
            }
            break;
            case 38: /* reduce AAstatementlist2StatementList */
            {
                ArrayList<Object> list = new38();
                push(goTo(7), list);
            }
            break;
            case 39: /* reduce AAasgnstatement1Statement */
            {
                ArrayList<Object> list = new39();
                push(goTo(8), list);
            }
            break;
            case 40: /* reduce AAasgnstatement2Statement */
            {
                ArrayList<Object> list = new40();
                push(goTo(8), list);
            }
            break;
            case 41: /* reduce AAifstatement1Statement */
            {
                ArrayList<Object> list = new41();
                push(goTo(8), list);
            }
            break;
            case 42: /* reduce AAifstatement2Statement */
            {
                ArrayList<Object> list = new42();
                push(goTo(8), list);
            }
            break;
            case 43: /* reduce ALoopStatement */
            {
                ArrayList<Object> list = new43();
                push(goTo(8), list);
            }
            break;
            case 44: /* reduce AAcallstatement1Statement */
            {
                ArrayList<Object> list = new44();
                push(goTo(8), list);
            }
            break;
            case 45: /* reduce AAcallstatement2Statement */
            {
                ArrayList<Object> list = new45();
                push(goTo(8), list);
            }
            break;
            case 46: /* reduce AAcallstatement3Statement */
            {
                ArrayList<Object> list = new46();
                push(goTo(8), list);
            }
            break;
            case 47: /* reduce AAcallstatement4Statement */
            {
                ArrayList<Object> list = new47();
                push(goTo(8), list);
            }
            break;
            case 48: /* reduce AAexpressionlist1ExpressionList */
            {
                ArrayList<Object> list = new48();
                push(goTo(9), list);
            }
            break;
            case 49: /* reduce AAexpressionlist2ExpressionList */
            {
                ArrayList<Object> list = new49();
                push(goTo(9), list);
            }
            break;
            case 50: /* reduce AExpression */
            {
                ArrayList<Object> list = new50();
                push(goTo(10), list);
            }
            break;
            case 51: /* reduce AOrExpressionLvl6 */
            {
                ArrayList<Object> list = new51();
                push(goTo(11), list);
            }
            break;
            case 52: /* reduce APassExpressionLvl6 */
            {
                ArrayList<Object> list = new52();
                push(goTo(11), list);
            }
            break;
            case 53: /* reduce AAndExpressionLvl5 */
            {
                ArrayList<Object> list = new53();
                push(goTo(12), list);
            }
            break;
            case 54: /* reduce APassExpressionLvl5 */
            {
                ArrayList<Object> list = new54();
                push(goTo(12), list);
            }
            break;
            case 55: /* reduce AEqExpressionLvl4 */
            {
                ArrayList<Object> list = new55();
                push(goTo(13), list);
            }
            break;
            case 56: /* reduce AGtExpressionLvl4 */
            {
                ArrayList<Object> list = new56();
                push(goTo(13), list);
            }
            break;
            case 57: /* reduce AGteExpressionLvl4 */
            {
                ArrayList<Object> list = new57();
                push(goTo(13), list);
            }
            break;
            case 58: /* reduce APassExpressionLvl4 */
            {
                ArrayList<Object> list = new58();
                push(goTo(13), list);
            }
            break;
            case 59: /* reduce AConcatExpressionLvlc */
            {
                ArrayList<Object> list = new59();
                push(goTo(14), list);
            }
            break;
            case 60: /* reduce APassExpressionLvlc */
            {
                ArrayList<Object> list = new60();
                push(goTo(14), list);
            }
            break;
            case 61: /* reduce AAddExpressionLvl3 */
            {
                ArrayList<Object> list = new61();
                push(goTo(15), list);
            }
            break;
            case 62: /* reduce ASubExpressionLvl3 */
            {
                ArrayList<Object> list = new62();
                push(goTo(15), list);
            }
            break;
            case 63: /* reduce APassExpressionLvl3 */
            {
                ArrayList<Object> list = new63();
                push(goTo(15), list);
            }
            break;
            case 64: /* reduce AMulExpressionLvl2 */
            {
                ArrayList<Object> list = new64();
                push(goTo(16), list);
            }
            break;
            case 65: /* reduce ADivExpressionLvl2 */
            {
                ArrayList<Object> list = new65();
                push(goTo(16), list);
            }
            break;
            case 66: /* reduce APassExpressionLvl2 */
            {
                ArrayList<Object> list = new66();
                push(goTo(16), list);
            }
            break;
            case 67: /* reduce ANotExpressionLvl1 */
            {
                ArrayList<Object> list = new67();
                push(goTo(17), list);
            }
            break;
            case 68: /* reduce AIncExpressionLvl1 */
            {
                ArrayList<Object> list = new68();
                push(goTo(17), list);
            }
            break;
            case 69: /* reduce ANegExpressionLvl1 */
            {
                ArrayList<Object> list = new69();
                push(goTo(17), list);
            }
            break;
            case 70: /* reduce APassExpressionLvl1 */
            {
                ArrayList<Object> list = new70();
                push(goTo(17), list);
            }
            break;
            case 71: /* reduce AIdentifierExpressionLvl0 */
            {
                ArrayList<Object> list = new71();
                push(goTo(18), list);
            }
            break;
            case 72: /* reduce AStringExpressionLvl0 */
            {
                ArrayList<Object> list = new72();
                push(goTo(18), list);
            }
            break;
            case 73: /* reduce AIntExpressionLvl0 */
            {
                ArrayList<Object> list = new73();
                push(goTo(18), list);
            }
            break;
            case 74: /* reduce ATrueExpressionLvl0 */
            {
                ArrayList<Object> list = new74();
                push(goTo(18), list);
            }
            break;
            case 75: /* reduce AFalseExpressionLvl0 */
            {
                ArrayList<Object> list = new75();
                push(goTo(18), list);
            }
            break;
            case 76: /* reduce ANewObjExpressionLvl0 */
            {
                ArrayList<Object> list = new76();
                push(goTo(18), list);
            }
            break;
            case 77: /* reduce AMeExpressionLvl0 */
            {
                ArrayList<Object> list = new77();
                push(goTo(18), list);
            }
            break;
            case 78: /* reduce AExprExpressionLvl0 */
            {
                ArrayList<Object> list = new78();
                push(goTo(18), list);
            }
            break;
            case 79: /* reduce AAmcallexpressionlvl01ExpressionLvl0 */
            {
                ArrayList<Object> list = new79();
                push(goTo(18), list);
            }
            break;
            case 80: /* reduce AAmcallexpressionlvl02ExpressionLvl0 */
            {
                ArrayList<Object> list = new80();
                push(goTo(18), list);
            }
            break;
            case 81: /* reduce AAmcallexpressionlvl03ExpressionLvl0 */
            {
                ArrayList<Object> list = new81();
                push(goTo(18), list);
            }
            break;
            case 82: /* reduce AAmcallexpressionlvl04ExpressionLvl0 */
            {
                ArrayList<Object> list = new82();
                push(goTo(18), list);
            }
            break;
            case 83: /* reduce AArrayExpressionLvl0 */
            {
                ArrayList<Object> list = new83();
                push(goTo(18), list);
            }
            break;
            case 84: /* reduce AExpressionListHelper */
            {
                ArrayList<Object> list = new84();
                push(goTo(19), list);
            }
            break;
            case 85: /* reduce AExpressionHelper */
            {
                ArrayList<Object> list = new85();
                push(goTo(20), list);
            }
            break;
            case 86: /* reduce ACallHelper */
            {
                ArrayList<Object> list = new86();
                push(goTo(21), list);
            }
            break;
            case 87: /* reduce AIfElse */
            {
                ArrayList<Object> list = new87();
                push(goTo(22), list);
            }
            break;
            case 88: /* reduce AStatementListHelper */
            {
                ArrayList<Object> list = new88();
                push(goTo(23), list);
            }
            break;
            case 89: /* reduce AVarType */
            {
                ArrayList<Object> list = new89();
                push(goTo(24), list);
            }
            break;
            case 90: /* reduce AVarExp */
            {
                ArrayList<Object> list = new90();
                push(goTo(25), list);
            }
            break;
            case 91: /* reduce AArgListHelper */
            {
                ArrayList<Object> list = new91();
                push(goTo(26), list);
            }
            break;
            case 92: /* reduce AInheritsFrom */
            {
                ArrayList<Object> list = new92();
                push(goTo(27), list);
            }
            break;
            case 93: /* reduce AInnerClass */
            {
                ArrayList<Object> list = new93();
                push(goTo(28), list);
            }
            break;
            case 94: /* reduce ATerminal$Newline */
            {
                ArrayList<Object> list = new94();
                push(goTo(29), list);
            }
            break;
            case 95: /* reduce ANonTerminal$Newline */
            {
                ArrayList<Object> list = new95();
                push(goTo(29), list);
            }
            break;
            case 96: /* reduce ATerminal$InnerClass */
            {
                ArrayList<Object> list = new96();
                push(goTo(30), list);
            }
            break;
            case 97: /* reduce ANonTerminal$InnerClass */
            {
                ArrayList<Object> list = new97();
                push(goTo(30), list);
            }
            break;
            case 98: /* reduce ATerminal$VarDecl */
            {
                ArrayList<Object> list = new98();
                push(goTo(31), list);
            }
            break;
            case 99: /* reduce ANonTerminal$VarDecl */
            {
                ArrayList<Object> list = new99();
                push(goTo(31), list);
            }
            break;
            case 100: /* reduce ATerminal$MethodDecl */
            {
                ArrayList<Object> list = new100();
                push(goTo(32), list);
            }
            break;
            case 101: /* reduce ANonTerminal$MethodDecl */
            {
                ArrayList<Object> list = new101();
                push(goTo(32), list);
            }
            break;
            case 102: /* reduce ATerminal$ArgListHelper */
            {
                ArrayList<Object> list = new102();
                push(goTo(33), list);
            }
            break;
            case 103: /* reduce ANonTerminal$ArgListHelper */
            {
                ArrayList<Object> list = new103();
                push(goTo(33), list);
            }
            break;
            case 104: /* reduce ATerminal$StatementListHelper */
            {
                ArrayList<Object> list = new104();
                push(goTo(34), list);
            }
            break;
            case 105: /* reduce ANonTerminal$StatementListHelper */
            {
                ArrayList<Object> list = new105();
                push(goTo(34), list);
            }
            break;
            case 106: /* reduce ATerminal$ExpressionHelper */
            {
                ArrayList<Object> list = new106();
                push(goTo(35), list);
            }
            break;
            case 107: /* reduce ANonTerminal$ExpressionHelper */
            {
                ArrayList<Object> list = new107();
                push(goTo(35), list);
            }
            break;
            case 108: /* reduce ATerminal$ExpressionListHelper */
            {
                ArrayList<Object> list = new108();
                push(goTo(36), list);
            }
            break;
            case 109: /* reduce ANonTerminal$ExpressionListHelper */
            {
                ArrayList<Object> list = new109();
                push(goTo(36), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        pclassdeclNode2 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdeclNode2 = (PClassDecl)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode4.add(pclassdeclNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode4.add(pclassdeclNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAstart5Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        pclassdeclNode2 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAstart6Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAstart7Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdeclNode2 = (PClassDecl)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode4.add(pclassdeclNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAstart8Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(pclassdeclNode2 != null)
	{
	  listNode4.add(pclassdeclNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAclassp1ClassP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TIdentifier tidentifierNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode6 = (TIdentifier)nodeArrayList6.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, null, listNode4, listNode5, tidentifierNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAclassp2ClassP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PInheritsFrom pinheritsfromNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TIdentifier tidentifierNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsfromNode3 = (PInheritsFrom)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidentifierNode6 = (TIdentifier)nodeArrayList7.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, pinheritsfromNode3, listNode4, listNode5, tidentifierNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAclassp3ClassP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList7.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, null, listNode5, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAclassp4ClassP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PInheritsFrom pinheritsfromNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsfromNode3 = (PInheritsFrom)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList8.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, pinheritsfromNode3, listNode5, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAclassp5ClassP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList7.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, null, listNode4, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAclassp6ClassP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PInheritsFrom pinheritsfromNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TIdentifier tidentifierNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsfromNode3 = (PInheritsFrom)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidentifierNode7 = (TIdentifier)nodeArrayList8.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, pinheritsfromNode3, listNode4, listNode6, tidentifierNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAclassp7ClassP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList8.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, null, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAclassp8ClassP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PInheritsFrom pinheritsfromNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsfromNode3 = (PInheritsFrom)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList9.get(0);

        pclassdeclNode1 = new AClassDecl(tidentifierNode2, pinheritsfromNode3, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAvardecl1VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, null, null);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAvardecl2VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, ptypeNode3, null);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAvardecl3VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, null, pexpressionNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAvardecl4VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pvardeclNode1 = new AVarDecl(tidentifierNode2, ptypeNode3, pexpressionNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmethoddecl1MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, null, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAmethoddecl2MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, null, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAmethoddecl3MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TIdentifier tidentifierNode8;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidentifierNode8 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, ptypeNode4, listNode5, listNode7, tidentifierNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAmethoddecl4MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, ptypeNode5, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAmethoddecl5MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, null, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAmethoddecl6MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TIdentifier tidentifierNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList10.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidentifierNode10 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, null, listNode7, listNode9, tidentifierNode10);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAmethoddecl7MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TIdentifier tidentifierNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidentifierNode9 = (TIdentifier)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode3, ptypeNode4, listNode6, listNode8, tidentifierNode9);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAmethoddecl8MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TIdentifier tidentifierNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList11.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidentifierNode10 = (TIdentifier)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidentifierNode2, listNode4, ptypeNode5, listNode7, listNode9, tidentifierNode10);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAargumentdecllist1ArgumentDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArg pargNode1;
        pargNode1 = (PArg)nodeArrayList1.get(0);
	if(pargNode1 != null)
	{
	  listNode2.add(pargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAargumentdecllist2ArgumentDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArg pargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargNode2 = (PArg)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargNode2 != null)
	{
	  listNode3.add(pargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AArgumentDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList3.get(0);

        pargNode1 = new AArg(tidentifierNode2, ptypeNode3);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAarraytype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        ptypeNode1 = new AArrayType(ptypeNode2, null);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAarraytype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        PExpression pexpressionNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        ptypeNode1 = new AArrayType(ptypeNode2, pexpressionNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAstatementlist1StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAstatementlist2StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAasgnstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAsgnStatement(tidentifierNode2, listNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAasgnstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpression pexpressionNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAsgnStatement(tidentifierNode2, listNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAifstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAifstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ALoopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new ALoopStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAcallstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pstatementNode1 = new ACallStatement(null, tidentifierNode3, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAcallstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pstatementNode1 = new ACallStatement(pexpressionNode2, tidentifierNode3, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAcallstatement3Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new ACallStatement(null, tidentifierNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAcallstatement4Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new ACallStatement(pexpressionNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAexpressionlist1ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAexpressionlist2ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AOrExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOrExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce APassExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAndExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAndExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce APassExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AEqExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AEqExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AGtExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGtExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AGteExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGteExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce APassExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AConcatExpressionLvlc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AConcatExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce APassExpressionLvlc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAddExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAddExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ASubExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce APassExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AMulExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMulExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ADivExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce APassExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANotExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANotExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AIncExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AIncExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANegExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANegExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce APassExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AIdentifierExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(tidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AStringExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TStrStart tstrstartNode2;
        TStrIteral tstriteralNode3;
        tstrstartNode2 = (TStrStart)nodeArrayList1.get(0);
        tstriteralNode3 = (TStrIteral)nodeArrayList2.get(0);

        pexpressionNode1 = new AStringExpression(tstrstartNode2, tstriteralNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AIntExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIntLiteral tintliteralNode2;
        tintliteralNode2 = (TIntLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new AIntExpression(tintliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ATrueExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpressionNode1 = new ATrueExpression(ttrueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AFalseExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpressionNode1 = new AFalseExpression(tfalseNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANewObjExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList2.get(0);

        pexpressionNode1 = new ANewObjExpression(ptypeNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AMeExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TMe tmeNode2;
        tmeNode2 = (TMe)nodeArrayList1.get(0);

        pexpressionNode1 = new AMeExpression(tmeNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AExprExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AExprExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAmcallexpressionlvl01ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AMcallExpression(null, tidentifierNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AAmcallexpressionlvl02ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AMcallExpression(pexpressionNode2, tidentifierNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AAmcallexpressionlvl03ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new AMcallExpression(null, tidentifierNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AAmcallexpressionlvl04ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new AMcallExpression(pexpressionNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AArrayExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AArrayExpression(tidentifierNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AExpressionListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AExpressionHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ACallHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AIfElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AStatementListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AVarType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList2.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AVarExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        pargNode1 = (PArg)nodeArrayList1.get(0);
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AInheritsFrom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInheritsFrom pinheritsfromNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        pinheritsfromNode1 = new AInheritsFrom(tidentifierNode2);
        }
	nodeList.add(pinheritsfromNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AInnerClass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList2.get(0);
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ATerminal$Newline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNewline tnewlineNode1;
        tnewlineNode1 = (TNewline)nodeArrayList1.get(0);
	if(tnewlineNode1 != null)
	{
	  listNode2.add(tnewlineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANonTerminal$Newline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TNewline tnewlineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnewlineNode2 = (TNewline)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnewlineNode2 != null)
	{
	  listNode3.add(tnewlineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ATerminal$InnerClass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ANonTerminal$InnerClass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassDecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ATerminal$ArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArg pargNode1;
        pargNode1 = (PArg)nodeArrayList1.get(0);
	if(pargNode1 != null)
	{
	  listNode2.add(pargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ANonTerminal$ArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArg pargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargNode2 = (PArg)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargNode2 != null)
	{
	  listNode3.add(pargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ATerminal$StatementListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ANonTerminal$StatementListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ATerminal$ExpressionHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ANonTerminal$ExpressionHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ATerminal$ExpressionListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ANonTerminal$ExpressionListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 2}, {45, SHIFT, 6}, },
			{{-1, ERROR, 3}, {48, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 5}, {0, SHIFT, 10}, {3, SHIFT, 2}, },
			{{-1, ERROR, 6}, {9, SHIFT, 12}, {11, SHIFT, 13}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 10}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, },
			{{-1, ERROR, 12}, {7, SHIFT, 20}, },
			{{-1, ERROR, 13}, {0, SHIFT, 1}, },
			{{-1, ERROR, 14}, {11, SHIFT, 22}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 10}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 10}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 1}, },
			{{-1, ERROR, 20}, {45, SHIFT, 24}, },
			{{-1, ERROR, 21}, {0, SHIFT, 10}, {5, SHIFT, 25}, {45, SHIFT, 26}, },
			{{-1, ERROR, 22}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 7}, {0, SHIFT, 10}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 25}, {45, SHIFT, 32}, },
			{{-1, ERROR, 26}, {0, SHIFT, 1}, {36, SHIFT, 33}, {37, SHIFT, 34}, {43, SHIFT, 35}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 29}, {5, SHIFT, 39}, {45, SHIFT, 26}, },
			{{-1, ERROR, 30}, {5, SHIFT, 42}, {45, SHIFT, 43}, },
			{{-1, ERROR, 31}, {0, SHIFT, 10}, {5, SHIFT, 45}, {45, SHIFT, 26}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 33}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 34}, {38, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, ERROR, 35}, {1, SHIFT, 75}, {10, SHIFT, 76}, {16, SHIFT, 77}, {45, SHIFT, 78}, },
			{{-1, ERROR, 36}, {0, SHIFT, 1}, {36, SHIFT, 33}, },
			{{-1, ERROR, 37}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 16}, {0, SHIFT, 10}, },
			{{-1, ERROR, 39}, {45, SHIFT, 83}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 41}, {5, SHIFT, 84}, {45, SHIFT, 43}, },
			{{-1, ERROR, 42}, {45, SHIFT, 85}, },
			{{-1, ERROR, 43}, {37, SHIFT, 34}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 45}, {45, SHIFT, 86}, },
			{{-1, ERROR, 46}, {5, SHIFT, 87}, {45, SHIFT, 26}, },
			{{-1, ERROR, 47}, {5, SHIFT, 89}, {45, SHIFT, 43}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 50}, {1, SHIFT, 75}, {10, SHIFT, 76}, {16, SHIFT, 77}, {45, SHIFT, 78}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 52}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 54}, {25, SHIFT, 92}, },
			{{-1, ERROR, 55}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 56}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 57}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, REDUCE, 71}, {37, SHIFT, 96}, {39, SHIFT, 97}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 50}, {21, SHIFT, 100}, },
			{{-1, REDUCE, 52}, {20, SHIFT, 101}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 58}, {28, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {35, SHIFT, 105}, },
			{{-1, REDUCE, 60}, {29, SHIFT, 106}, {30, SHIFT, 107}, },
			{{-1, REDUCE, 63}, {31, SHIFT, 108}, {32, SHIFT, 109}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 70}, {44, SHIFT, 110}, },
			{{-1, ERROR, 68}, {45, SHIFT, 111}, },
			{{-1, ERROR, 69}, {11, SHIFT, 112}, {43, SHIFT, 35}, },
			{{-1, ERROR, 70}, {43, SHIFT, 114}, },
			{{-1, ERROR, 71}, {38, SHIFT, 115}, },
			{{-1, REDUCE, 28}, {42, SHIFT, 116}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 74}, {45, SHIFT, 70}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 89}, {39, SHIFT, 119}, },
			{{-1, ERROR, 80}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 17}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 18}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 84}, {45, SHIFT, 121}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 87}, {45, SHIFT, 122}, },
			{{-1, ERROR, 88}, {5, SHIFT, 123}, {45, SHIFT, 43}, },
			{{-1, ERROR, 89}, {45, SHIFT, 124}, },
			{{-1, REDUCE, 76}, {39, SHIFT, 119}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 95}, {38, SHIFT, 125}, },
			{{-1, ERROR, 96}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {38, SHIFT, 126}, {45, SHIFT, 58}, },
			{{-1, ERROR, 97}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 83}, {39, SHIFT, 97}, },
			{{-1, ERROR, 100}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 101}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 102}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 103}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 104}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 105}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 106}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 107}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 108}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 109}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 111}, {37, SHIFT, 143}, },
			{{-1, ERROR, 112}, {0, SHIFT, 1}, },
			{{-1, ERROR, 113}, {11, SHIFT, 145}, },
			{{-1, ERROR, 114}, {1, SHIFT, 75}, {10, SHIFT, 76}, {16, SHIFT, 77}, {45, SHIFT, 78}, },
			{{-1, ERROR, 115}, {11, SHIFT, 147}, {43, SHIFT, 35}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 29}, {42, SHIFT, 116}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 119}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {40, SHIFT, 149}, {45, SHIFT, 58}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 123}, {45, SHIFT, 151}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 127}, {38, SHIFT, 152}, },
			{{-1, REDUCE, 48}, {41, SHIFT, 153}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 130}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 131}, {40, SHIFT, 156}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 51}, {20, SHIFT, 101}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 59}, {29, SHIFT, 106}, {30, SHIFT, 107}, },
			{{-1, REDUCE, 55}, {28, SHIFT, 102}, },
			{{-1, REDUCE, 57}, {28, SHIFT, 102}, },
			{{-1, REDUCE, 56}, {28, SHIFT, 102}, },
			{{-1, REDUCE, 61}, {31, SHIFT, 108}, {32, SHIFT, 109}, },
			{{-1, REDUCE, 62}, {31, SHIFT, 108}, {32, SHIFT, 109}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 143}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {38, SHIFT, 157}, {45, SHIFT, 58}, },
			{{-1, ERROR, 144}, {0, SHIFT, 10}, {2, SHIFT, 159}, {45, SHIFT, 160}, },
			{{-1, ERROR, 145}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 30}, {39, SHIFT, 119}, },
			{{-1, ERROR, 147}, {0, SHIFT, 1}, },
			{{-1, ERROR, 148}, {11, SHIFT, 164}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 150}, {40, SHIFT, 165}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 49}, {41, SHIFT, 153}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 158}, {38, SHIFT, 166}, },
			{{-1, ERROR, 159}, {0, SHIFT, 1}, },
			{{-1, ERROR, 160}, {0, SHIFT, 1}, {36, SHIFT, 33}, {43, SHIFT, 35}, },
			{{-1, ERROR, 161}, {2, SHIFT, 168}, {45, SHIFT, 160}, },
			{{-1, ERROR, 162}, {0, SHIFT, 10}, {2, SHIFT, 169}, {45, SHIFT, 160}, },
			{{-1, ERROR, 163}, {0, SHIFT, 10}, {2, SHIFT, 171}, {45, SHIFT, 160}, },
			{{-1, ERROR, 164}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, ERROR, 168}, {0, SHIFT, 1}, },
			{{-1, ERROR, 169}, {0, SHIFT, 1}, },
			{{-1, ERROR, 170}, {2, SHIFT, 185}, {45, SHIFT, 160}, },
			{{-1, ERROR, 171}, {0, SHIFT, 1}, },
			{{-1, ERROR, 172}, {2, SHIFT, 187}, {45, SHIFT, 160}, },
			{{-1, ERROR, 173}, {0, SHIFT, 10}, {2, SHIFT, 188}, {45, SHIFT, 160}, },
			{{-1, ERROR, 174}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 175}, {19, SHIFT, 191}, },
			{{-1, REDUCE, 71}, {36, SHIFT, 192}, {37, SHIFT, 193}, {39, SHIFT, 97}, },
			{{-1, ERROR, 177}, {5, SHIFT, 195}, },
			{{-1, ERROR, 178}, {0, SHIFT, 1}, },
			{{-1, ERROR, 179}, {44, SHIFT, 110}, },
			{{-1, ERROR, 180}, {45, SHIFT, 197}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 38}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, ERROR, 185}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, ERROR, 187}, {0, SHIFT, 1}, },
			{{-1, ERROR, 188}, {0, SHIFT, 1}, },
			{{-1, ERROR, 189}, {2, SHIFT, 205}, {45, SHIFT, 160}, },
			{{-1, ERROR, 190}, {17, SHIFT, 206}, },
			{{-1, ERROR, 191}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 192}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 193}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {38, SHIFT, 209}, {45, SHIFT, 58}, },
			{{-1, REDUCE, 83}, {36, SHIFT, 211}, {39, SHIFT, 97}, },
			{{-1, ERROR, 195}, {45, SHIFT, 212}, },
			{{-1, REDUCE, 88}, {0, SHIFT, 10}, },
			{{-1, ERROR, 197}, {37, SHIFT, 213}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 199}, {5, SHIFT, 214}, },
			{{-1, ERROR, 200}, {5, SHIFT, 215}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, ERROR, 202}, {5, SHIFT, 217}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, ERROR, 205}, {0, SHIFT, 1}, },
			{{-1, ERROR, 206}, {0, SHIFT, 1}, },
			{{-1, ERROR, 207}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 44}, {44, REDUCE, 79}, },
			{{-1, ERROR, 210}, {38, SHIFT, 223}, },
			{{-1, ERROR, 211}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {45, SHIFT, 58}, },
			{{-1, ERROR, 212}, {0, SHIFT, 1}, },
			{{-1, ERROR, 213}, {6, SHIFT, 48}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {37, SHIFT, 57}, {38, SHIFT, 226}, {45, SHIFT, 58}, },
			{{-1, ERROR, 214}, {45, SHIFT, 228}, },
			{{-1, ERROR, 215}, {45, SHIFT, 229}, },
			{{-1, ERROR, 216}, {5, SHIFT, 230}, },
			{{-1, ERROR, 217}, {45, SHIFT, 231}, },
			{{-1, ERROR, 218}, {5, SHIFT, 232}, },
			{{-1, ERROR, 219}, {5, SHIFT, 233}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, REDUCE, 46}, {44, REDUCE, 81}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 20}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 45}, {44, REDUCE, 80}, },
			{{-1, ERROR, 227}, {38, SHIFT, 237}, },
			{{-1, ERROR, 228}, {0, SHIFT, 1}, },
			{{-1, ERROR, 229}, {0, SHIFT, 1}, },
			{{-1, ERROR, 230}, {45, SHIFT, 240}, },
			{{-1, ERROR, 231}, {0, SHIFT, 1}, },
			{{-1, ERROR, 232}, {45, SHIFT, 242}, },
			{{-1, ERROR, 233}, {45, SHIFT, 243}, },
			{{-1, ERROR, 234}, {5, SHIFT, 244}, },
			{{-1, ERROR, 235}, {4, SHIFT, 245}, {5, SHIFT, 246}, },
			{{-1, ERROR, 236}, {5, SHIFT, 248}, },
			{{-1, REDUCE, 47}, {44, REDUCE, 82}, },
			{{-1, REDUCE, 24}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 22}, {0, SHIFT, 10}, },
			{{-1, ERROR, 240}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 21}, {0, SHIFT, 10}, },
			{{-1, ERROR, 242}, {0, SHIFT, 1}, },
			{{-1, ERROR, 243}, {0, SHIFT, 1}, },
			{{-1, ERROR, 244}, {45, SHIFT, 252}, },
			{{-1, ERROR, 245}, {0, SHIFT, 1}, },
			{{-1, ERROR, 246}, {8, SHIFT, 254}, },
			{{-1, ERROR, 247}, {5, SHIFT, 255}, },
			{{-1, ERROR, 248}, {12, SHIFT, 256}, },
			{{-1, REDUCE, 26}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 25}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 23}, {0, SHIFT, 10}, },
			{{-1, ERROR, 252}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 10}, {6, SHIFT, 48}, {8, SHIFT, 174}, {12, SHIFT, 175}, {13, SHIFT, 49}, {14, SHIFT, 50}, {18, SHIFT, 51}, {23, SHIFT, 53}, {24, SHIFT, 54}, {37, SHIFT, 57}, {45, SHIFT, 176}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 255}, {8, SHIFT, 259}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 27}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 42}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 15}, {0, 4}, {5, 11}, },
			{{-1, 27}, {29, 40}, {46, 40}, {161, 40}, {170, 40}, {172, 40}, {189, 40}, },
			{{-1, 28}, {30, 44}, {41, 44}, {47, 44}, {88, 44}, },
			{{-1, 71}, },
			{{-1, 72}, {74, 117}, },
			{{-1, 79}, {50, 90}, {114, 146}, },
			{{-1, 177}, {183, 199}, {184, 200}, {186, 202}, {201, 216}, {203, 218}, {204, 219}, {220, 234}, {221, 235}, {222, 236}, {253, 258}, },
			{{-1, 178}, },
			{{-1, 127}, {143, 158}, {193, 210}, {213, 227}, },
			{{-1, 128}, {33, 59}, {57, 95}, {97, 131}, {119, 150}, {130, 154}, {174, 190}, {191, 207}, {192, 208}, {211, 224}, },
			{{-1, 60}, },
			{{-1, 61}, {100, 133}, },
			{{-1, 62}, {101, 134}, },
			{{-1, 63}, {103, 136}, {104, 137}, {105, 138}, },
			{{-1, 64}, {102, 135}, },
			{{-1, 65}, {106, 139}, {107, 140}, },
			{{-1, 66}, {52, 91}, {55, 93}, {56, 94}, {108, 141}, {109, 142}, },
			{{-1, 67}, {167, 179}, {182, 179}, {183, 179}, {184, 179}, {186, 179}, {201, 179}, {203, 179}, {204, 179}, {220, 179}, {221, 179}, {222, 179}, {253, 179}, },
			{{-1, 129}, {130, 155}, },
			{{-1, 98}, {99, 132}, {194, 132}, },
			{{-1, 68}, {167, 180}, {182, 180}, {183, 180}, {184, 180}, {186, 180}, {201, 180}, {203, 180}, {204, 180}, {220, 180}, {221, 180}, {222, 180}, {253, 180}, },
			{{-1, 247}, },
			{{-1, 181}, {182, 198}, },
			{{-1, 36}, {69, 113}, {115, 148}, },
			{{-1, 37}, {36, 80}, },
			{{-1, 73}, {74, 118}, },
			{{-1, 14}, },
			{{-1, 7}, {9, 16}, {19, 16}, },
			{{-1, 38}, {0, 5}, {4, 8}, {9, 17}, {11, 18}, {13, 21}, {19, 23}, {22, 31}, {36, 81}, {37, 82}, {80, 120}, {112, 144}, {145, 162}, {147, 163}, {159, 167}, {164, 173}, {168, 183}, {169, 184}, {171, 186}, {178, 196}, {185, 201}, {187, 203}, {188, 204}, {205, 220}, {206, 221}, {207, 222}, {212, 225}, {228, 238}, {229, 239}, {231, 241}, {240, 249}, {242, 250}, {243, 251}, {245, 253}, {252, 257}, },
			{{-1, 9}, {11, 19}, },
			{{-1, 29}, {31, 46}, {144, 161}, {162, 170}, {163, 172}, {173, 189}, },
			{{-1, 30}, {29, 41}, {31, 47}, {46, 88}, },
			{{-1, 74}, },
			{{-1, 182}, },
			{{-1, 99}, {176, 194}, },
			{{-1, 130}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: newline, 'class'",
			"expecting: newline, 'begin', 'class', 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'true', int literal, '"', '(', identifier, EOF",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: newline, EOF",
			"expecting: 'inherits', 'is'",
			"expecting: newline, 'class', EOF",
			"expecting: 'from'",
			"expecting: newline",
			"expecting: 'is'",
			"expecting: newline, 'end', identifier",
			"expecting: newline, ':=', '(', ':'",
			"expecting: 'begin', 'end', identifier",
			"expecting: 'end', identifier",
			"expecting: 'false', 'me', 'new', 'true', 'not', int literal, '"', '+', '-', '(', identifier",
			"expecting: ')', identifier",
			"expecting: 'boolean', 'int', 'string', identifier",
			"expecting: newline, ':='",
			"expecting: newline, 'begin', 'end', identifier",
			"expecting: '('",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ')', ']', ',', '.'",
			"expecting: str iteral",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', '(', ')', '[', ']', ',', '.'",
			"expecting: newline, 'then', 'or', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', '&', '=', '>', '>=', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '=', '>', '>=', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ')', ']', ','",
			"expecting: 'is', ':'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: newline, 'is', 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ':=', ')', '[', ']', ',', ';', '.'",
			"expecting: newline, 'is', ':=', '['",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ')', '[', ']', ',', '.'",
			"expecting: 'false', 'me', 'new', 'true', 'not', int literal, '"', '+', '-', '(', ')', identifier",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ':=', ')', '[', ']', ',', '.'",
			"expecting: 'false', 'me', 'new', 'true', 'not', int literal, '"', '+', '-', '(', ']', identifier",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: newline, 'then', 'and', 'or', '&', ')', ']', ','",
			"expecting: newline, 'begin', identifier",
			"expecting: ')', '[', ';'",
			"expecting: newline, ':=', ':'",
			"expecting: 'begin', identifier",
			"expecting: newline, 'end', 'false', 'if', 'loop', 'me', 'new', 'true', int literal, '"', '(', identifier",
			"expecting: 'while'",
			"expecting: ':=', '(', '[', '.'",
			"expecting: 'end'",
			"expecting: '.'",
			"expecting: 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'true', int literal, '"', '(', identifier",
			"expecting: 'then'",
			"expecting: ':=', '[', '.'",
			"expecting: newline, 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'true', int literal, '"', '(', identifier",
			"expecting: newline, '.'",
			"expecting: 'else', 'end'",
			"expecting: 'if'",
			"expecting: 'loop'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 0, 5, 4, 6, 4, 1, 4, 7, 8, 9, 4, 4, 6, 6, 4, 2, 10, 8, 6, 9, 2, 11, 12, 13, 13, 13, 10, 4, 14, 15, 16, 17, 8, 18, 2, 12, 13, 2, 19, 13, 2, 13, 13, 20, 20, 16, 20, 14, 20, 21, 14, 14, 14, 22, 8, 23, 24, 24, 25, 26, 27, 27, 20, 2, 28, 29, 30, 31, 2, 2, 32, 32, 32, 32, 33, 8, 18, 18, 4, 2, 4, 4, 2, 13, 2, 34, 27, 20, 27, 27, 30, 35, 14, 36, 34, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 2, 19, 8, 9, 16, 28, 2, 31, 2, 37, 18, 4, 4, 2, 4, 20, 20, 30, 38, 14, 14, 39, 36, 24, 24, 26, 40, 40, 40, 27, 27, 27, 27, 35, 41, 8, 42, 8, 9, 32, 39, 4, 20, 14, 38, 14, 36, 20, 30, 8, 43, 44, 41, 41, 8, 32, 20, 45, 8, 8, 44, 8, 44, 41, 14, 46, 47, 48, 8, 49, 2, 50, 50, 45, 45, 8, 45, 8, 8, 44, 51, 14, 14, 35, 52, 2, 53, 19, 50, 48, 48, 45, 48, 45, 45, 8, 8, 8, 8, 54, 30, 14, 8, 35, 2, 2, 48, 2, 48, 48, 45, 53, 45, 54, 8, 10, 54, 30, 8, 8, 2, 8, 2, 2, 48, 55, 48, 54, 10, 10, 8, 10, 8, 8, 2, 8, 56, 48, 57, 10, 10, 10, 8, 45, 8, 56, 8, 10, 48, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
