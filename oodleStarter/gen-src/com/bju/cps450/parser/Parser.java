/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.parser;

import com.bju.cps450.lexer.*;
import com.bju.cps450.node.*;
import com.bju.cps450.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAstart3Start */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAstart4Start */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce AAstart5Start */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list, false);
            }
            break;
            case 5: /* reduce AAstart6Start */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list, false);
            }
            break;
            case 6: /* reduce AAstart7Start */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list, false);
            }
            break;
            case 7: /* reduce AAstart8Start */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list, false);
            }
            break;
            case 8: /* reduce AAclass1Class */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AAclass2Class */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce AAclass3Class */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list, false);
            }
            break;
            case 11: /* reduce AAclass4Class */
            {
                ArrayList<Object> list = new11();
                push(goTo(1), list, false);
            }
            break;
            case 12: /* reduce AAclass5Class */
            {
                ArrayList<Object> list = new12();
                push(goTo(1), list, false);
            }
            break;
            case 13: /* reduce AAclass6Class */
            {
                ArrayList<Object> list = new13();
                push(goTo(1), list, false);
            }
            break;
            case 14: /* reduce AAclass7Class */
            {
                ArrayList<Object> list = new14();
                push(goTo(1), list, false);
            }
            break;
            case 15: /* reduce AAclass8Class */
            {
                ArrayList<Object> list = new15();
                push(goTo(1), list, false);
            }
            break;
            case 16: /* reduce AAvardecl1VarDecl */
            {
                ArrayList<Object> list = new16();
                push(goTo(2), list, false);
            }
            break;
            case 17: /* reduce AAvardecl2VarDecl */
            {
                ArrayList<Object> list = new17();
                push(goTo(2), list, false);
            }
            break;
            case 18: /* reduce AAvardecl3VarDecl */
            {
                ArrayList<Object> list = new18();
                push(goTo(2), list, false);
            }
            break;
            case 19: /* reduce AAvardecl4VarDecl */
            {
                ArrayList<Object> list = new19();
                push(goTo(2), list, false);
            }
            break;
            case 20: /* reduce AMethodDecl */
            {
                ArrayList<Object> list = new20();
                push(goTo(3), list, false);
            }
            break;
            case 21: /* reduce AAargumentdecllist1ArgumentDeclList */
            {
                ArrayList<Object> list = new21();
                push(goTo(4), list, false);
            }
            break;
            case 22: /* reduce AAargumentdecllist2ArgumentDeclList */
            {
                ArrayList<Object> list = new22();
                push(goTo(4), list, false);
            }
            break;
            case 23: /* reduce AArgumentDecl */
            {
                ArrayList<Object> list = new23();
                push(goTo(5), list, false);
            }
            break;
            case 24: /* reduce AIntType */
            {
                ArrayList<Object> list = new24();
                push(goTo(6), list, false);
            }
            break;
            case 25: /* reduce AStringType */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list, false);
            }
            break;
            case 26: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list, false);
            }
            break;
            case 27: /* reduce AIdType */
            {
                ArrayList<Object> list = new27();
                push(goTo(6), list, false);
            }
            break;
            case 28: /* reduce AAarraytype1Type */
            {
                ArrayList<Object> list = new28();
                push(goTo(6), list, false);
            }
            break;
            case 29: /* reduce AAarraytype2Type */
            {
                ArrayList<Object> list = new29();
                push(goTo(6), list, false);
            }
            break;
            case 30: /* reduce AAstatementlist1StatementList */
            {
                ArrayList<Object> list = new30();
                push(goTo(7), list, false);
            }
            break;
            case 31: /* reduce AAstatementlist2StatementList */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list, false);
            }
            break;
            case 32: /* reduce AAsgnStatement */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list, false);
            }
            break;
            case 33: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list, false);
            }
            break;
            case 34: /* reduce ALoopStatement */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, false);
            }
            break;
            case 35: /* reduce ACallStatement */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list, false);
            }
            break;
            case 36: /* reduce AAassignmentstmt1AssignmentStmt */
            {
                ArrayList<Object> list = new36();
                push(goTo(9), list, false);
            }
            break;
            case 37: /* reduce AAassignmentstmt2AssignmentStmt */
            {
                ArrayList<Object> list = new37();
                push(goTo(9), list, false);
            }
            break;
            case 38: /* reduce AAifstmt1IfStmt */
            {
                ArrayList<Object> list = new38();
                push(goTo(10), list, false);
            }
            break;
            case 39: /* reduce AAifstmt2IfStmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(10), list, false);
            }
            break;
            case 40: /* reduce ALoopStmt */
            {
                ArrayList<Object> list = new40();
                push(goTo(11), list, false);
            }
            break;
            case 41: /* reduce AAcallstmt1CallStmt */
            {
                ArrayList<Object> list = new41();
                push(goTo(12), list, false);
            }
            break;
            case 42: /* reduce AAcallstmt2CallStmt */
            {
                ArrayList<Object> list = new42();
                push(goTo(12), list, false);
            }
            break;
            case 43: /* reduce AAcallstmt3CallStmt */
            {
                ArrayList<Object> list = new43();
                push(goTo(12), list, false);
            }
            break;
            case 44: /* reduce AAcallstmt4CallStmt */
            {
                ArrayList<Object> list = new44();
                push(goTo(12), list, false);
            }
            break;
            case 45: /* reduce AAexpressionlist1ExpressionList */
            {
                ArrayList<Object> list = new45();
                push(goTo(13), list, false);
            }
            break;
            case 46: /* reduce AAexpressionlist2ExpressionList */
            {
                ArrayList<Object> list = new46();
                push(goTo(13), list, false);
            }
            break;
            case 47: /* reduce AExpression */
            {
                ArrayList<Object> list = new47();
                push(goTo(14), list, false);
            }
            break;
            case 48: /* reduce AOrExpressionLvl6 */
            {
                ArrayList<Object> list = new48();
                push(goTo(15), list, false);
            }
            break;
            case 49: /* reduce APassExpressionLvl6 */
            {
                ArrayList<Object> list = new49();
                push(goTo(15), list, false);
            }
            break;
            case 50: /* reduce AAndExpressionLvl5 */
            {
                ArrayList<Object> list = new50();
                push(goTo(16), list, false);
            }
            break;
            case 51: /* reduce APassExpressionLvl5 */
            {
                ArrayList<Object> list = new51();
                push(goTo(16), list, false);
            }
            break;
            case 52: /* reduce AEqExpressionLvl4 */
            {
                ArrayList<Object> list = new52();
                push(goTo(17), list, false);
            }
            break;
            case 53: /* reduce AGtExpressionLvl4 */
            {
                ArrayList<Object> list = new53();
                push(goTo(17), list, false);
            }
            break;
            case 54: /* reduce AGteExpressionLvl4 */
            {
                ArrayList<Object> list = new54();
                push(goTo(17), list, false);
            }
            break;
            case 55: /* reduce APassExpressionLvl4 */
            {
                ArrayList<Object> list = new55();
                push(goTo(17), list, false);
            }
            break;
            case 56: /* reduce AConcatExpressionLvlc */
            {
                ArrayList<Object> list = new56();
                push(goTo(18), list, false);
            }
            break;
            case 57: /* reduce APassExpressionLvlc */
            {
                ArrayList<Object> list = new57();
                push(goTo(18), list, false);
            }
            break;
            case 58: /* reduce AAddExpressionLvl3 */
            {
                ArrayList<Object> list = new58();
                push(goTo(19), list, false);
            }
            break;
            case 59: /* reduce ASubExpressionLvl3 */
            {
                ArrayList<Object> list = new59();
                push(goTo(19), list, false);
            }
            break;
            case 60: /* reduce APassExpressionLvl3 */
            {
                ArrayList<Object> list = new60();
                push(goTo(19), list, false);
            }
            break;
            case 61: /* reduce AMulExpressionLvl2 */
            {
                ArrayList<Object> list = new61();
                push(goTo(20), list, false);
            }
            break;
            case 62: /* reduce ADivExpressionLvl2 */
            {
                ArrayList<Object> list = new62();
                push(goTo(20), list, false);
            }
            break;
            case 63: /* reduce APassExpressionLvl2 */
            {
                ArrayList<Object> list = new63();
                push(goTo(20), list, false);
            }
            break;
            case 64: /* reduce ANotExpressionLvl1 */
            {
                ArrayList<Object> list = new64();
                push(goTo(21), list, false);
            }
            break;
            case 65: /* reduce AAddExpressionLvl1 */
            {
                ArrayList<Object> list = new65();
                push(goTo(21), list, false);
            }
            break;
            case 66: /* reduce ANegExpressionLvl1 */
            {
                ArrayList<Object> list = new66();
                push(goTo(21), list, false);
            }
            break;
            case 67: /* reduce APassExpressionLvl1 */
            {
                ArrayList<Object> list = new67();
                push(goTo(21), list, false);
            }
            break;
            case 68: /* reduce AIdentifierExpressionLvl0 */
            {
                ArrayList<Object> list = new68();
                push(goTo(22), list, false);
            }
            break;
            case 69: /* reduce AStringExpressionLvl0 */
            {
                ArrayList<Object> list = new69();
                push(goTo(22), list, false);
            }
            break;
            case 70: /* reduce AIntExpressionLvl0 */
            {
                ArrayList<Object> list = new70();
                push(goTo(22), list, false);
            }
            break;
            case 71: /* reduce ATrueExpressionLvl0 */
            {
                ArrayList<Object> list = new71();
                push(goTo(22), list, false);
            }
            break;
            case 72: /* reduce AFalseExpressionLvl0 */
            {
                ArrayList<Object> list = new72();
                push(goTo(22), list, false);
            }
            break;
            case 73: /* reduce ANewObjExpressionLvl0 */
            {
                ArrayList<Object> list = new73();
                push(goTo(22), list, false);
            }
            break;
            case 74: /* reduce AMeExpressionLvl0 */
            {
                ArrayList<Object> list = new74();
                push(goTo(22), list, false);
            }
            break;
            case 75: /* reduce AExprExpressionLvl0 */
            {
                ArrayList<Object> list = new75();
                push(goTo(22), list, false);
            }
            break;
            case 76: /* reduce AAmcallexpressionlvl01ExpressionLvl0 */
            {
                ArrayList<Object> list = new76();
                push(goTo(22), list, false);
            }
            break;
            case 77: /* reduce AAmcallexpressionlvl02ExpressionLvl0 */
            {
                ArrayList<Object> list = new77();
                push(goTo(22), list, false);
            }
            break;
            case 78: /* reduce AAmcallexpressionlvl03ExpressionLvl0 */
            {
                ArrayList<Object> list = new78();
                push(goTo(22), list, false);
            }
            break;
            case 79: /* reduce AAmcallexpressionlvl04ExpressionLvl0 */
            {
                ArrayList<Object> list = new79();
                push(goTo(22), list, false);
            }
            break;
            case 80: /* reduce AArrayExpressionLvl0 */
            {
                ArrayList<Object> list = new80();
                push(goTo(22), list, false);
            }
            break;
            case 81: /* reduce AAmethodheader1MethodHeader */
            {
                ArrayList<Object> list = new81();
                push(goTo(23), list, false);
            }
            break;
            case 82: /* reduce AAmethodheader2MethodHeader */
            {
                ArrayList<Object> list = new82();
                push(goTo(23), list, false);
            }
            break;
            case 83: /* reduce AAmethodheader3MethodHeader */
            {
                ArrayList<Object> list = new83();
                push(goTo(23), list, false);
            }
            break;
            case 84: /* reduce AAmethodheader4MethodHeader */
            {
                ArrayList<Object> list = new84();
                push(goTo(23), list, false);
            }
            break;
            case 85: /* reduce AAmethodheader5MethodHeader */
            {
                ArrayList<Object> list = new85();
                push(goTo(23), list, false);
            }
            break;
            case 86: /* reduce AAmethodheader6MethodHeader */
            {
                ArrayList<Object> list = new86();
                push(goTo(23), list, false);
            }
            break;
            case 87: /* reduce AAmethodheader7MethodHeader */
            {
                ArrayList<Object> list = new87();
                push(goTo(23), list, false);
            }
            break;
            case 88: /* reduce AAmethodheader8MethodHeader */
            {
                ArrayList<Object> list = new88();
                push(goTo(23), list, false);
            }
            break;
            case 89: /* reduce AMethodMiddle */
            {
                ArrayList<Object> list = new89();
                push(goTo(24), list, false);
            }
            break;
            case 90: /* reduce AMethodEnd */
            {
                ArrayList<Object> list = new90();
                push(goTo(25), list, false);
            }
            break;
            case 91: /* reduce AExpressionListHelper */
            {
                ArrayList<Object> list = new91();
                push(goTo(26), list, false);
            }
            break;
            case 92: /* reduce AExpressionHelper */
            {
                ArrayList<Object> list = new92();
                push(goTo(27), list, false);
            }
            break;
            case 93: /* reduce ACallHelper */
            {
                ArrayList<Object> list = new93();
                push(goTo(28), list, false);
            }
            break;
            case 94: /* reduce AIfElse */
            {
                ArrayList<Object> list = new94();
                push(goTo(29), list, false);
            }
            break;
            case 95: /* reduce AStatementListHelper */
            {
                ArrayList<Object> list = new95();
                push(goTo(30), list, false);
            }
            break;
            case 96: /* reduce AVarType */
            {
                ArrayList<Object> list = new96();
                push(goTo(31), list, false);
            }
            break;
            case 97: /* reduce AVarExp */
            {
                ArrayList<Object> list = new97();
                push(goTo(32), list, false);
            }
            break;
            case 98: /* reduce AArgListHelper */
            {
                ArrayList<Object> list = new98();
                push(goTo(33), list, false);
            }
            break;
            case 99: /* reduce AInheritsFrom */
            {
                ArrayList<Object> list = new99();
                push(goTo(34), list, false);
            }
            break;
            case 100: /* reduce AInnerClass */
            {
                ArrayList<Object> list = new100();
                push(goTo(35), list, false);
            }
            break;
            case 101: /* reduce ATerminal$Newline */
            {
                ArrayList<Object> list = new101();
                push(goTo(36), list, true);
            }
            break;
            case 102: /* reduce ANonTerminal$Newline */
            {
                ArrayList<Object> list = new102();
                push(goTo(36), list, true);
            }
            break;
            case 103: /* reduce ATerminal$InnerClass */
            {
                ArrayList<Object> list = new103();
                push(goTo(37), list, true);
            }
            break;
            case 104: /* reduce ANonTerminal$InnerClass */
            {
                ArrayList<Object> list = new104();
                push(goTo(37), list, true);
            }
            break;
            case 105: /* reduce ATerminal$VarDecl */
            {
                ArrayList<Object> list = new105();
                push(goTo(38), list, true);
            }
            break;
            case 106: /* reduce ANonTerminal$VarDecl */
            {
                ArrayList<Object> list = new106();
                push(goTo(38), list, true);
            }
            break;
            case 107: /* reduce ATerminal$MethodDecl */
            {
                ArrayList<Object> list = new107();
                push(goTo(39), list, true);
            }
            break;
            case 108: /* reduce ANonTerminal$MethodDecl */
            {
                ArrayList<Object> list = new108();
                push(goTo(39), list, true);
            }
            break;
            case 109: /* reduce ATerminal$ArgListHelper */
            {
                ArrayList<Object> list = new109();
                push(goTo(40), list, true);
            }
            break;
            case 110: /* reduce ANonTerminal$ArgListHelper */
            {
                ArrayList<Object> list = new110();
                push(goTo(40), list, true);
            }
            break;
            case 111: /* reduce ATerminal$StatementListHelper */
            {
                ArrayList<Object> list = new111();
                push(goTo(41), list, true);
            }
            break;
            case 112: /* reduce ANonTerminal$StatementListHelper */
            {
                ArrayList<Object> list = new112();
                push(goTo(41), list, true);
            }
            break;
            case 113: /* reduce ATerminal$ExpressionHelper */
            {
                ArrayList<Object> list = new113();
                push(goTo(42), list, true);
            }
            break;
            case 114: /* reduce ANonTerminal$ExpressionHelper */
            {
                ArrayList<Object> list = new114();
                push(goTo(42), list, true);
            }
            break;
            case 115: /* reduce ATerminal$ExpressionListHelper */
            {
                ArrayList<Object> list = new115();
                push(goTo(43), list, true);
            }
            break;
            case 116: /* reduce ANonTerminal$ExpressionListHelper */
            {
                ArrayList<Object> list = new116();
                push(goTo(43), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PClass pclassNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        pclassNode3 = (PClass)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode2, pclassNode3, listNode4, listNode5);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PClass pclassNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pclassNode4 = (PClass)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode3, pclassNode4, listNode5, listNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PClass pclassNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        pclassNode3 = (PClass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode2, pclassNode3, listNode5, listNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PClass pclassNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pclassNode4 = (PClass)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode3, pclassNode4, listNode6, listNode7);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAstart5Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PClass pclassNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        pclassNode3 = (PClass)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstartNode1 = new AStart(listNode2, pclassNode3, listNode4, listNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAstart6Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PClass pclassNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pclassNode4 = (PClass)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstartNode1 = new AStart(listNode3, pclassNode4, listNode5, listNode7);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAstart7Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PClass pclassNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        }
        pclassNode3 = (PClass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstartNode1 = new AStart(listNode2, pclassNode3, listNode5, listNode7);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAstart8Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PClass pclassNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pclassNode4 = (PClass)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pstartNode1 = new AStart(listNode3, pclassNode4, listNode6, listNode8);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAclass1Class */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TClassKey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEnd tendNode10;
        TIdentifier tidentifierNode11;
        tclasskeyNode2 = (TClassKey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        tendNode10 = (TEnd)nodeArrayList5.get(0);
        tidentifierNode11 = (TIdentifier)nodeArrayList6.get(0);

        pclassNode1 = new AClass(tclasskeyNode2, tidentifierNode3, null, tisNode5, listNode7, listNode8, listNode9, tendNode10, tidentifierNode11);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAclass2Class */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TClassKey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        PInheritsFrom pinheritsfromNode4;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEnd tendNode10;
        TIdentifier tidentifierNode11;
        tclasskeyNode2 = (TClassKey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsfromNode4 = (PInheritsFrom)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        tendNode10 = (TEnd)nodeArrayList6.get(0);
        tidentifierNode11 = (TIdentifier)nodeArrayList7.get(0);

        pclassNode1 = new AClass(tclasskeyNode2, tidentifierNode3, pinheritsfromNode4, tisNode5, listNode7, listNode8, listNode9, tendNode10, tidentifierNode11);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAclass3Class */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TClassKey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TIdentifier tidentifierNode12;
        tclasskeyNode2 = (TClassKey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }
        tendNode11 = (TEnd)nodeArrayList6.get(0);
        tidentifierNode12 = (TIdentifier)nodeArrayList7.get(0);

        pclassNode1 = new AClass(tclasskeyNode2, tidentifierNode3, null, tisNode5, listNode7, listNode9, listNode10, tendNode11, tidentifierNode12);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAclass4Class */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TClassKey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        PInheritsFrom pinheritsfromNode4;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TIdentifier tidentifierNode12;
        tclasskeyNode2 = (TClassKey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsfromNode4 = (PInheritsFrom)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }
        tendNode11 = (TEnd)nodeArrayList7.get(0);
        tidentifierNode12 = (TIdentifier)nodeArrayList8.get(0);

        pclassNode1 = new AClass(tclasskeyNode2, tidentifierNode3, pinheritsfromNode4, tisNode5, listNode7, listNode9, listNode10, tendNode11, tidentifierNode12);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAclass5Class */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TClassKey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TIdentifier tidentifierNode12;
        tclasskeyNode2 = (TClassKey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendNode11 = (TEnd)nodeArrayList6.get(0);
        tidentifierNode12 = (TIdentifier)nodeArrayList7.get(0);

        pclassNode1 = new AClass(tclasskeyNode2, tidentifierNode3, null, tisNode5, listNode7, listNode8, listNode10, tendNode11, tidentifierNode12);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAclass6Class */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TClassKey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        PInheritsFrom pinheritsfromNode4;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TIdentifier tidentifierNode12;
        tclasskeyNode2 = (TClassKey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsfromNode4 = (PInheritsFrom)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendNode11 = (TEnd)nodeArrayList7.get(0);
        tidentifierNode12 = (TIdentifier)nodeArrayList8.get(0);

        pclassNode1 = new AClass(tclasskeyNode2, tidentifierNode3, pinheritsfromNode4, tisNode5, listNode7, listNode8, listNode10, tendNode11, tidentifierNode12);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAclass7Class */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TClassKey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TEnd tendNode12;
        TIdentifier tidentifierNode13;
        tclasskeyNode2 = (TClassKey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        tendNode12 = (TEnd)nodeArrayList7.get(0);
        tidentifierNode13 = (TIdentifier)nodeArrayList8.get(0);

        pclassNode1 = new AClass(tclasskeyNode2, tidentifierNode3, null, tisNode5, listNode7, listNode9, listNode11, tendNode12, tidentifierNode13);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAclass8Class */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TClassKey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        PInheritsFrom pinheritsfromNode4;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TEnd tendNode12;
        TIdentifier tidentifierNode13;
        tclasskeyNode2 = (TClassKey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsfromNode4 = (PInheritsFrom)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        tendNode12 = (TEnd)nodeArrayList8.get(0);
        tidentifierNode13 = (TIdentifier)nodeArrayList9.get(0);

        pclassNode1 = new AClass(tclasskeyNode2, tidentifierNode3, pinheritsfromNode4, tisNode5, listNode7, listNode9, listNode11, tendNode12, tidentifierNode13);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAvardecl1VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvardeclNode1 = new AVarDecl(tidentifierNode2, null, null, listNode6);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAvardecl2VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PVarType pvartypeNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pvartypeNode3 = (PVarType)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvardeclNode1 = new AVarDecl(tidentifierNode2, pvartypeNode3, null, listNode6);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAvardecl3VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PVarExp pvarexpNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pvarexpNode4 = (PVarExp)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvardeclNode1 = new AVarDecl(tidentifierNode2, null, pvarexpNode4, listNode6);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAvardecl4VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PVarType pvartypeNode3;
        PVarExp pvarexpNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pvartypeNode3 = (PVarType)nodeArrayList2.get(0);
        pvarexpNode4 = (PVarExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvardeclNode1 = new AVarDecl(tidentifierNode2, pvartypeNode3, pvarexpNode4, listNode6);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AMethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        PMethodHeader pmethodheaderNode2;
        PMethodMiddle pmethodmiddleNode3;
        PMethodEnd pmethodendNode4;
        pmethodheaderNode2 = (PMethodHeader)nodeArrayList1.get(0);
        pmethodmiddleNode3 = (PMethodMiddle)nodeArrayList2.get(0);
        pmethodendNode4 = (PMethodEnd)nodeArrayList3.get(0);

        pmethoddeclNode1 = new AMethodDecl(pmethodheaderNode2, pmethodmiddleNode3, pmethodendNode4);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAargumentdecllist1ArgumentDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentDeclList pargumentdecllistNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PArgumentDecl pargumentdeclNode3;
        {
            // Block
        }
        pargumentdeclNode3 = (PArgumentDecl)nodeArrayList1.get(0);

        pargumentdecllistNode1 = new AArgumentDeclList(listNode2, pargumentdeclNode3);
        }
	nodeList.add(pargumentdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAargumentdecllist2ArgumentDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentDeclList pargumentdecllistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PArgumentDecl pargumentdeclNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pargumentdeclNode4 = (PArgumentDecl)nodeArrayList2.get(0);

        pargumentdecllistNode1 = new AArgumentDeclList(listNode3, pargumentdeclNode4);
        }
	nodeList.add(pargumentdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AArgumentDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentDecl pargumentdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pargumentdeclNode1 = new AArgumentDecl(tidentifierNode2, tcolonNode3, ptypeNode4);
        }
	nodeList.add(pargumentdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAarraytype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRbrace trbraceNode4;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        trbraceNode4 = (TRbrace)nodeArrayList2.get(0);

        ptypeNode1 = new AArrayType(tlbraceNode2, null, trbraceNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAarraytype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        PExpression pexpressionNode3;
        TRbrace trbraceNode4;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trbraceNode4 = (TRbrace)nodeArrayList3.get(0);

        ptypeNode1 = new AArrayType(tlbraceNode2, pexpressionNode3, trbraceNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAstatementlist1StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStatementList pstatementlistNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pstatementlistNode1 = new AStatementList(listNode2);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAstatementlist2StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementList pstatementlistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementlistNode1 = new AStatementList(listNode3);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAsgnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAssignmentStmt passignmentstmtNode2;
        passignmentstmtNode2 = (PAssignmentStmt)nodeArrayList1.get(0);

        pstatementNode1 = new AAsgnStatement(passignmentstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfStmt pifstmtNode2;
        pifstmtNode2 = (PIfStmt)nodeArrayList1.get(0);

        pstatementNode1 = new AIfStatement(pifstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ALoopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PLoopStmt ploopstmtNode2;
        ploopstmtNode2 = (PLoopStmt)nodeArrayList1.get(0);

        pstatementNode1 = new ALoopStatement(ploopstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ACallStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCallStmt pcallstmtNode2;
        pcallstmtNode2 = (PCallStmt)nodeArrayList1.get(0);

        pstatementNode1 = new ACallStatement(pcallstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAassignmentstmt1AssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentStmt passignmentstmtNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TAssignment tassignmentNode4;
        PExpression pexpressionNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        tassignmentNode4 = (TAssignment)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        passignmentstmtNode1 = new AAssignmentStmt(tidentifierNode2, listNode3, tassignmentNode4, pexpressionNode5);
        }
	nodeList.add(passignmentstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAassignmentstmt2AssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentStmt passignmentstmtNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TAssignment tassignmentNode5;
        PExpression pexpressionNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tassignmentNode5 = (TAssignment)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        passignmentstmtNode1 = new AAssignmentStmt(tidentifierNode2, listNode4, tassignmentNode5, pexpressionNode6);
        }
	nodeList.add(passignmentstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAifstmt1IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStatementList pstatementlistNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TEnd tendNode9;
        TIf tifNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstatementlistNode7 = (PStatementList)nodeArrayList5.get(0);
        tendNode9 = (TEnd)nodeArrayList6.get(0);
        tifNode10 = (TIf)nodeArrayList7.get(0);

        pifstmtNode1 = new AIfStmt(tifNode2, pexpressionNode3, tthenNode4, listNode6, pstatementlistNode7, null, tendNode9, tifNode10);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAifstmt2IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStatementList pstatementlistNode7;
        PIfElse pifelseNode8;
        TEnd tendNode9;
        TIf tifNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstatementlistNode7 = (PStatementList)nodeArrayList5.get(0);
        pifelseNode8 = (PIfElse)nodeArrayList6.get(0);
        tendNode9 = (TEnd)nodeArrayList7.get(0);
        tifNode10 = (TIf)nodeArrayList8.get(0);

        pifstmtNode1 = new AIfStmt(tifNode2, pexpressionNode3, tthenNode4, listNode6, pstatementlistNode7, pifelseNode8, tendNode9, tifNode10);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ALoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoopStmt ploopstmtNode1;
        {
            // Block
        TLoop tloopNode2;
        TWhile twhileNode3;
        PExpression pexpressionNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStatementList pstatementlistNode7;
        TEnd tendNode8;
        TLoop tloopNode9;
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        twhileNode3 = (TWhile)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstatementlistNode7 = (PStatementList)nodeArrayList5.get(0);
        tendNode8 = (TEnd)nodeArrayList6.get(0);
        tloopNode9 = (TLoop)nodeArrayList7.get(0);

        ploopstmtNode1 = new ALoopStmt(tloopNode2, twhileNode3, pexpressionNode4, listNode6, pstatementlistNode7, tendNode8, tloopNode9);
        }
	nodeList.add(ploopstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAcallstmt1CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallStmt pcallstmtNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRparen trparenNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode4 = (TLparen)nodeArrayList2.get(0);
        trparenNode6 = (TRparen)nodeArrayList3.get(0);

        pcallstmtNode1 = new ACallStmt(null, tidentifierNode3, tlparenNode4, null, trparenNode6);
        }
	nodeList.add(pcallstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAcallstmt2CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallStmt pcallstmtNode1;
        {
            // Block
        PCallHelper pcallhelperNode2;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRparen trparenNode6;
        pcallhelperNode2 = (PCallHelper)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        trparenNode6 = (TRparen)nodeArrayList4.get(0);

        pcallstmtNode1 = new ACallStmt(pcallhelperNode2, tidentifierNode3, tlparenNode4, null, trparenNode6);
        }
	nodeList.add(pcallstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAcallstmt3CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallStmt pcallstmtNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        PExpressionList pexpressionlistNode5;
        TRparen trparenNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode4 = (TLparen)nodeArrayList2.get(0);
        pexpressionlistNode5 = (PExpressionList)nodeArrayList3.get(0);
        trparenNode6 = (TRparen)nodeArrayList4.get(0);

        pcallstmtNode1 = new ACallStmt(null, tidentifierNode3, tlparenNode4, pexpressionlistNode5, trparenNode6);
        }
	nodeList.add(pcallstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAcallstmt4CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallStmt pcallstmtNode1;
        {
            // Block
        PCallHelper pcallhelperNode2;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        PExpressionList pexpressionlistNode5;
        TRparen trparenNode6;
        pcallhelperNode2 = (PCallHelper)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pexpressionlistNode5 = (PExpressionList)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);

        pcallstmtNode1 = new ACallStmt(pcallhelperNode2, tidentifierNode3, tlparenNode4, pexpressionlistNode5, trparenNode6);
        }
	nodeList.add(pcallstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAexpressionlist1ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionList pexpressionlistNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExpression pexpressionNode3;
        {
            // Block
        }
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);

        pexpressionlistNode1 = new AExpressionList(listNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAexpressionlist2ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionList pexpressionlistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpression pexpressionNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pexpressionlistNode1 = new AExpressionList(listNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpressionLvl6 pexpressionlvl6Node2;
        pexpressionlvl6Node2 = (PExpressionLvl6)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(pexpressionlvl6Node2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AOrExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl6 pexpressionlvl6Node1;
        {
            // Block
        PExpressionLvl6 pexpressionlvl6Node2;
        TOr torNode3;
        PExpressionLvl5 pexpressionlvl5Node4;
        pexpressionlvl6Node2 = (PExpressionLvl6)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexpressionlvl5Node4 = (PExpressionLvl5)nodeArrayList3.get(0);

        pexpressionlvl6Node1 = new AOrExpressionLvl6(pexpressionlvl6Node2, torNode3, pexpressionlvl5Node4);
        }
	nodeList.add(pexpressionlvl6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce APassExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl6 pexpressionlvl6Node1;
        {
            // Block
        PExpressionLvl5 pexpressionlvl5Node2;
        pexpressionlvl5Node2 = (PExpressionLvl5)nodeArrayList1.get(0);

        pexpressionlvl6Node1 = new APassExpressionLvl6(pexpressionlvl5Node2);
        }
	nodeList.add(pexpressionlvl6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAndExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl5 pexpressionlvl5Node1;
        {
            // Block
        PExpressionLvl5 pexpressionlvl5Node2;
        TAnd tandNode3;
        PExpressionLvl4 pexpressionlvl4Node4;
        pexpressionlvl5Node2 = (PExpressionLvl5)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexpressionlvl4Node4 = (PExpressionLvl4)nodeArrayList3.get(0);

        pexpressionlvl5Node1 = new AAndExpressionLvl5(pexpressionlvl5Node2, tandNode3, pexpressionlvl4Node4);
        }
	nodeList.add(pexpressionlvl5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce APassExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl5 pexpressionlvl5Node1;
        {
            // Block
        PExpressionLvl4 pexpressionlvl4Node2;
        pexpressionlvl4Node2 = (PExpressionLvl4)nodeArrayList1.get(0);

        pexpressionlvl5Node1 = new APassExpressionLvl5(pexpressionlvl4Node2);
        }
	nodeList.add(pexpressionlvl5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AEqExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvlc pexpressionlvlcNode2;
        TEqual tequalNode3;
        PExpressionLvlc pexpressionlvlcNode4;
        pexpressionlvlcNode2 = (PExpressionLvlc)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexpressionlvlcNode4 = (PExpressionLvlc)nodeArrayList3.get(0);

        pexpressionlvl4Node1 = new AEqExpressionLvl4(pexpressionlvlcNode2, tequalNode3, pexpressionlvlcNode4);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AGtExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvlc pexpressionlvlcNode2;
        TGreaterEq tgreatereqNode3;
        PExpressionLvlc pexpressionlvlcNode4;
        pexpressionlvlcNode2 = (PExpressionLvlc)nodeArrayList1.get(0);
        tgreatereqNode3 = (TGreaterEq)nodeArrayList2.get(0);
        pexpressionlvlcNode4 = (PExpressionLvlc)nodeArrayList3.get(0);

        pexpressionlvl4Node1 = new AGtExpressionLvl4(pexpressionlvlcNode2, tgreatereqNode3, pexpressionlvlcNode4);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AGteExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvlc pexpressionlvlcNode2;
        TGreaterThan tgreaterthanNode3;
        PExpressionLvlc pexpressionlvlcNode4;
        pexpressionlvlcNode2 = (PExpressionLvlc)nodeArrayList1.get(0);
        tgreaterthanNode3 = (TGreaterThan)nodeArrayList2.get(0);
        pexpressionlvlcNode4 = (PExpressionLvlc)nodeArrayList3.get(0);

        pexpressionlvl4Node1 = new AGteExpressionLvl4(pexpressionlvlcNode2, tgreaterthanNode3, pexpressionlvlcNode4);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce APassExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvlc pexpressionlvlcNode2;
        pexpressionlvlcNode2 = (PExpressionLvlc)nodeArrayList1.get(0);

        pexpressionlvl4Node1 = new APassExpressionLvl4(pexpressionlvlcNode2);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AConcatExpressionLvlc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvlc pexpressionlvlcNode1;
        {
            // Block
        PExpressionLvlc pexpressionlvlcNode2;
        TStrconcat tstrconcatNode3;
        PExpressionLvl3 pexpressionlvl3Node4;
        pexpressionlvlcNode2 = (PExpressionLvlc)nodeArrayList1.get(0);
        tstrconcatNode3 = (TStrconcat)nodeArrayList2.get(0);
        pexpressionlvl3Node4 = (PExpressionLvl3)nodeArrayList3.get(0);

        pexpressionlvlcNode1 = new AConcatExpressionLvlc(pexpressionlvlcNode2, tstrconcatNode3, pexpressionlvl3Node4);
        }
	nodeList.add(pexpressionlvlcNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce APassExpressionLvlc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvlc pexpressionlvlcNode1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);

        pexpressionlvlcNode1 = new APassExpressionLvlc(pexpressionlvl3Node2);
        }
	nodeList.add(pexpressionlvlcNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAddExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl3 pexpressionlvl3Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        TAddition tadditionNode3;
        PExpressionLvl2 pexpressionlvl2Node4;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);
        tadditionNode3 = (TAddition)nodeArrayList2.get(0);
        pexpressionlvl2Node4 = (PExpressionLvl2)nodeArrayList3.get(0);

        pexpressionlvl3Node1 = new AAddExpressionLvl3(pexpressionlvl3Node2, tadditionNode3, pexpressionlvl2Node4);
        }
	nodeList.add(pexpressionlvl3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ASubExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl3 pexpressionlvl3Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        TSubtraction tsubtractionNode3;
        PExpressionLvl2 pexpressionlvl2Node4;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);
        tsubtractionNode3 = (TSubtraction)nodeArrayList2.get(0);
        pexpressionlvl2Node4 = (PExpressionLvl2)nodeArrayList3.get(0);

        pexpressionlvl3Node1 = new ASubExpressionLvl3(pexpressionlvl3Node2, tsubtractionNode3, pexpressionlvl2Node4);
        }
	nodeList.add(pexpressionlvl3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce APassExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl3 pexpressionlvl3Node1;
        {
            // Block
        PExpressionLvl2 pexpressionlvl2Node2;
        pexpressionlvl2Node2 = (PExpressionLvl2)nodeArrayList1.get(0);

        pexpressionlvl3Node1 = new APassExpressionLvl3(pexpressionlvl2Node2);
        }
	nodeList.add(pexpressionlvl3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AMulExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl2 pexpressionlvl2Node1;
        {
            // Block
        PExpressionLvl2 pexpressionlvl2Node2;
        TMultiplication tmultiplicationNode3;
        PExpressionLvl1 pexpressionlvl1Node4;
        pexpressionlvl2Node2 = (PExpressionLvl2)nodeArrayList1.get(0);
        tmultiplicationNode3 = (TMultiplication)nodeArrayList2.get(0);
        pexpressionlvl1Node4 = (PExpressionLvl1)nodeArrayList3.get(0);

        pexpressionlvl2Node1 = new AMulExpressionLvl2(pexpressionlvl2Node2, tmultiplicationNode3, pexpressionlvl1Node4);
        }
	nodeList.add(pexpressionlvl2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ADivExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl2 pexpressionlvl2Node1;
        {
            // Block
        PExpressionLvl2 pexpressionlvl2Node2;
        TDivision tdivisionNode3;
        PExpressionLvl1 pexpressionlvl1Node4;
        pexpressionlvl2Node2 = (PExpressionLvl2)nodeArrayList1.get(0);
        tdivisionNode3 = (TDivision)nodeArrayList2.get(0);
        pexpressionlvl1Node4 = (PExpressionLvl1)nodeArrayList3.get(0);

        pexpressionlvl2Node1 = new ADivExpressionLvl2(pexpressionlvl2Node2, tdivisionNode3, pexpressionlvl1Node4);
        }
	nodeList.add(pexpressionlvl2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce APassExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl2 pexpressionlvl2Node1;
        {
            // Block
        PExpressionLvl1 pexpressionlvl1Node2;
        pexpressionlvl1Node2 = (PExpressionLvl1)nodeArrayList1.get(0);

        pexpressionlvl2Node1 = new APassExpressionLvl2(pexpressionlvl1Node2);
        }
	nodeList.add(pexpressionlvl2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANotExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        TNot tnotNode2;
        PExpressionLvl1 pexpressionlvl1Node3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexpressionlvl1Node3 = (PExpressionLvl1)nodeArrayList2.get(0);

        pexpressionlvl1Node1 = new ANotExpressionLvl1(tnotNode2, pexpressionlvl1Node3);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAddExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        TAddition tadditionNode2;
        PExpressionLvl1 pexpressionlvl1Node3;
        tadditionNode2 = (TAddition)nodeArrayList1.get(0);
        pexpressionlvl1Node3 = (PExpressionLvl1)nodeArrayList2.get(0);

        pexpressionlvl1Node1 = new AAddExpressionLvl1(tadditionNode2, pexpressionlvl1Node3);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANegExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        TSubtraction tsubtractionNode2;
        PExpressionLvl1 pexpressionlvl1Node3;
        tsubtractionNode2 = (TSubtraction)nodeArrayList1.get(0);
        pexpressionlvl1Node3 = (PExpressionLvl1)nodeArrayList2.get(0);

        pexpressionlvl1Node1 = new ANegExpressionLvl1(tsubtractionNode2, pexpressionlvl1Node3);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce APassExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        PExpressionLvl0 pexpressionlvl0Node2;
        pexpressionlvl0Node2 = (PExpressionLvl0)nodeArrayList1.get(0);

        pexpressionlvl1Node1 = new APassExpressionLvl1(pexpressionlvl0Node2);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AIdentifierExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new AIdentifierExpressionLvl0(tidentifierNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AStringExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TStrStart tstrstartNode2;
        TStrIteral tstriteralNode3;
        tstrstartNode2 = (TStrStart)nodeArrayList1.get(0);
        tstriteralNode3 = (TStrIteral)nodeArrayList2.get(0);

        pexpressionlvl0Node1 = new AStringExpressionLvl0(tstrstartNode2, tstriteralNode3);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AIntExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TIntLiteral tintliteralNode2;
        tintliteralNode2 = (TIntLiteral)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new AIntExpressionLvl0(tintliteralNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATrueExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new ATrueExpressionLvl0(ttrueNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AFalseExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new AFalseExpressionLvl0(tfalseNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ANewObjExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TNew tnewNode2;
        PType ptypeNode3;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pexpressionlvl0Node1 = new ANewObjExpressionLvl0(tnewNode2, ptypeNode3);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AMeExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TMe tmeNode2;
        tmeNode2 = (TMe)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new AMeExpressionLvl0(tmeNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AExprExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TLparen tlparenNode2;
        PExpression pexpressionNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        pexpressionlvl0Node1 = new AExprExpressionLvl0(tlparenNode2, pexpressionNode3, trparenNode4);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAmcallexpressionlvl01ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRparen trparenNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode4 = (TLparen)nodeArrayList2.get(0);
        trparenNode6 = (TRparen)nodeArrayList3.get(0);

        pexpressionlvl0Node1 = new AMcallExpressionLvl0(null, tidentifierNode3, tlparenNode4, null, trparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAmcallexpressionlvl02ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        PCallHelper pcallhelperNode2;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRparen trparenNode6;
        pcallhelperNode2 = (PCallHelper)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        trparenNode6 = (TRparen)nodeArrayList4.get(0);

        pexpressionlvl0Node1 = new AMcallExpressionLvl0(pcallhelperNode2, tidentifierNode3, tlparenNode4, null, trparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAmcallexpressionlvl03ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        PExpressionList pexpressionlistNode5;
        TRparen trparenNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode4 = (TLparen)nodeArrayList2.get(0);
        pexpressionlistNode5 = (PExpressionList)nodeArrayList3.get(0);
        trparenNode6 = (TRparen)nodeArrayList4.get(0);

        pexpressionlvl0Node1 = new AMcallExpressionLvl0(null, tidentifierNode3, tlparenNode4, pexpressionlistNode5, trparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAmcallexpressionlvl04ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        PCallHelper pcallhelperNode2;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        PExpressionList pexpressionlistNode5;
        TRparen trparenNode6;
        pcallhelperNode2 = (PCallHelper)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pexpressionlistNode5 = (PExpressionList)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);

        pexpressionlvl0Node1 = new AMcallExpressionLvl0(pcallhelperNode2, tidentifierNode3, tlparenNode4, pexpressionlistNode5, trparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AArrayExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionlvl0Node1 = new AArrayExpressionLvl0(tidentifierNode2, listNode4);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AAmethodheader1MethodHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHeader pmethodheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparen trparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        trparenNode5 = (TRparen)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }

        pmethodheaderNode1 = new AMethodHeader(tidentifierNode2, tlparenNode3, null, trparenNode5, null, tisNode7, listNode9, listNode10);
        }
	nodeList.add(pmethodheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AAmethodheader2MethodHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHeader pmethodheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRparen trparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }

        pmethodheaderNode1 = new AMethodHeader(tidentifierNode2, tlparenNode3, pargumentdecllistNode4, trparenNode5, null, tisNode7, listNode9, listNode10);
        }
	nodeList.add(pmethodheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AAmethodheader3MethodHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHeader pmethodheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparen trparenNode5;
        PVarType pvartypeNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        trparenNode5 = (TRparen)nodeArrayList3.get(0);
        pvartypeNode6 = (PVarType)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }

        pmethodheaderNode1 = new AMethodHeader(tidentifierNode2, tlparenNode3, null, trparenNode5, pvartypeNode6, tisNode7, listNode9, listNode10);
        }
	nodeList.add(pmethodheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AAmethodheader4MethodHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHeader pmethodheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRparen trparenNode5;
        PVarType pvartypeNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pvartypeNode6 = (PVarType)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }

        pmethodheaderNode1 = new AMethodHeader(tidentifierNode2, tlparenNode3, pargumentdecllistNode4, trparenNode5, pvartypeNode6, tisNode7, listNode9, listNode10);
        }
	nodeList.add(pmethodheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AAmethodheader5MethodHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHeader pmethodheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparen trparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        trparenNode5 = (TRparen)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pmethodheaderNode1 = new AMethodHeader(tidentifierNode2, tlparenNode3, null, trparenNode5, null, tisNode7, listNode9, listNode11);
        }
	nodeList.add(pmethodheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AAmethodheader6MethodHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHeader pmethodheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRparen trparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pmethodheaderNode1 = new AMethodHeader(tidentifierNode2, tlparenNode3, pargumentdecllistNode4, trparenNode5, null, tisNode7, listNode9, listNode11);
        }
	nodeList.add(pmethodheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAmethodheader7MethodHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHeader pmethodheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparen trparenNode5;
        PVarType pvartypeNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        trparenNode5 = (TRparen)nodeArrayList3.get(0);
        pvartypeNode6 = (PVarType)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pmethodheaderNode1 = new AMethodHeader(tidentifierNode2, tlparenNode3, null, trparenNode5, pvartypeNode6, tisNode7, listNode9, listNode11);
        }
	nodeList.add(pmethodheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAmethodheader8MethodHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHeader pmethodheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRparen trparenNode5;
        PVarType pvartypeNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pvartypeNode6 = (PVarType)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList8.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pmethodheaderNode1 = new AMethodHeader(tidentifierNode2, tlparenNode3, pargumentdecllistNode4, trparenNode5, pvartypeNode6, tisNode7, listNode9, listNode11);
        }
	nodeList.add(pmethodheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AMethodMiddle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodMiddle pmethodmiddleNode1;
        {
            // Block
        TBegin tbeginNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStatementList pstatementlistNode5;
        tbeginNode2 = (TBegin)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pstatementlistNode5 = (PStatementList)nodeArrayList3.get(0);

        pmethodmiddleNode1 = new AMethodMiddle(tbeginNode2, listNode4, pstatementlistNode5);
        }
	nodeList.add(pmethodmiddleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AMethodEnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodEnd pmethodendNode1;
        {
            // Block
        TEnd tendNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tendNode2 = (TEnd)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pmethodendNode1 = new AMethodEnd(tendNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pmethodendNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AExpressionListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionListHelper pexpressionlisthelperNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TComma tcommaNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);

        pexpressionlisthelperNode1 = new AExpressionListHelper(pexpressionNode2, tcommaNode3);
        }
	nodeList.add(pexpressionlisthelperNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AExpressionHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionHelper pexpressionhelperNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        PExpression pexpressionNode3;
        TRbrace trbraceNode4;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trbraceNode4 = (TRbrace)nodeArrayList3.get(0);

        pexpressionhelperNode1 = new AExpressionHelper(tlbraceNode2, pexpressionNode3, trbraceNode4);
        }
	nodeList.add(pexpressionhelperNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ACallHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallHelper pcallhelperNode1;
        {
            // Block
        PExpressionLvl0 pexpressionlvl0Node2;
        TDot tdotNode3;
        pexpressionlvl0Node2 = (PExpressionLvl0)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);

        pcallhelperNode1 = new ACallHelper(pexpressionlvl0Node2, tdotNode3);
        }
	nodeList.add(pcallhelperNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AIfElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElse pifelseNode1;
        {
            // Block
        TElse telseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStatementList pstatementlistNode5;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pstatementlistNode5 = (PStatementList)nodeArrayList3.get(0);

        pifelseNode1 = new AIfElse(telseNode2, listNode4, pstatementlistNode5);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AStatementListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementListHelper pstatementlisthelperNode1;
        {
            // Block
        PStatement pstatementNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementlisthelperNode1 = new AStatementListHelper(pstatementNode2, listNode4);
        }
	nodeList.add(pstatementlisthelperNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AVarType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TColon tcolonNode2;
        PType ptypeNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pvartypeNode1 = new AVarType(tcolonNode2, ptypeNode3);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AVarExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarExp pvarexpNode1;
        {
            // Block
        TAssignment tassignmentNode2;
        PExpression pexpressionNode3;
        tassignmentNode2 = (TAssignment)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pvarexpNode1 = new AVarExp(tassignmentNode2, pexpressionNode3);
        }
	nodeList.add(pvarexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgListHelper parglisthelperNode1;
        {
            // Block
        PArgumentDecl pargumentdeclNode2;
        TSemicolon tsemicolonNode3;
        pargumentdeclNode2 = (PArgumentDecl)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        parglisthelperNode1 = new AArgListHelper(pargumentdeclNode2, tsemicolonNode3);
        }
	nodeList.add(parglisthelperNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AInheritsFrom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInheritsFrom pinheritsfromNode1;
        {
            // Block
        TInherits tinheritsNode2;
        TFrom tfromNode3;
        TIdentifier tidentifierNode4;
        tinheritsNode2 = (TInherits)nodeArrayList1.get(0);
        tfromNode3 = (TFrom)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pinheritsfromNode1 = new AInheritsFrom(tinheritsNode2, tfromNode3, tidentifierNode4);
        }
	nodeList.add(pinheritsfromNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AInnerClass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInnerClass pinnerclassNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TClassKey tclasskeyNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tclasskeyNode4 = (TClassKey)nodeArrayList2.get(0);

        pinnerclassNode1 = new AInnerClass(listNode3, tclasskeyNode4);
        }
	nodeList.add(pinnerclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ATerminal$Newline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNewline tnewlineNode1;
        tnewlineNode1 = (TNewline)nodeArrayList1.get(0);
	if(tnewlineNode1 != null)
	{
	  listNode2.add(tnewlineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ANonTerminal$Newline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TNewline tnewlineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnewlineNode2 = (TNewline)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnewlineNode2 != null)
	{
	  listNode3.add(tnewlineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ATerminal$InnerClass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInnerClass pinnerclassNode1;
        pinnerclassNode1 = (PInnerClass)nodeArrayList1.get(0);
	if(pinnerclassNode1 != null)
	{
	  listNode2.add(pinnerclassNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANonTerminal$InnerClass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInnerClass pinnerclassNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinnerclassNode2 = (PInnerClass)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinnerclassNode2 != null)
	{
	  listNode3.add(pinnerclassNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ATerminal$ArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgListHelper parglisthelperNode1;
        parglisthelperNode1 = (PArgListHelper)nodeArrayList1.get(0);
	if(parglisthelperNode1 != null)
	{
	  listNode2.add(parglisthelperNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ANonTerminal$ArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgListHelper parglisthelperNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parglisthelperNode2 = (PArgListHelper)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parglisthelperNode2 != null)
	{
	  listNode3.add(parglisthelperNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ATerminal$StatementListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatementListHelper pstatementlisthelperNode1;
        pstatementlisthelperNode1 = (PStatementListHelper)nodeArrayList1.get(0);
	if(pstatementlisthelperNode1 != null)
	{
	  listNode2.add(pstatementlisthelperNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ANonTerminal$StatementListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatementListHelper pstatementlisthelperNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementlisthelperNode2 = (PStatementListHelper)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementlisthelperNode2 != null)
	{
	  listNode3.add(pstatementlisthelperNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ATerminal$ExpressionHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpressionHelper pexpressionhelperNode1;
        pexpressionhelperNode1 = (PExpressionHelper)nodeArrayList1.get(0);
	if(pexpressionhelperNode1 != null)
	{
	  listNode2.add(pexpressionhelperNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ANonTerminal$ExpressionHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpressionHelper pexpressionhelperNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionhelperNode2 = (PExpressionHelper)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionhelperNode2 != null)
	{
	  listNode3.add(pexpressionhelperNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ATerminal$ExpressionListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpressionListHelper pexpressionlisthelperNode1;
        pexpressionlisthelperNode1 = (PExpressionListHelper)nodeArrayList1.get(0);
	if(pexpressionlisthelperNode1 != null)
	{
	  listNode2.add(pexpressionlisthelperNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ANonTerminal$ExpressionListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpressionListHelper pexpressionlisthelperNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionlisthelperNode2 = (PExpressionListHelper)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionlisthelperNode2 != null)
	{
	  listNode3.add(pexpressionlisthelperNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 2}, {45, SHIFT, 6}, },
			{{-1, ERROR, 3}, {48, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 5}, {0, SHIFT, 10}, {3, SHIFT, 2}, },
			{{-1, ERROR, 6}, {9, SHIFT, 12}, {11, SHIFT, 13}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 10}, {3, SHIFT, 15}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, },
			{{-1, ERROR, 12}, {7, SHIFT, 20}, },
			{{-1, ERROR, 13}, {0, SHIFT, 1}, },
			{{-1, ERROR, 14}, {11, SHIFT, 22}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 10}, {3, SHIFT, 15}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 10}, {3, SHIFT, 15}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 1}, },
			{{-1, ERROR, 20}, {45, SHIFT, 24}, },
			{{-1, ERROR, 21}, {0, SHIFT, 10}, {5, SHIFT, 25}, {45, SHIFT, 26}, },
			{{-1, ERROR, 22}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 7}, {0, SHIFT, 10}, {3, SHIFT, 15}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 25}, {45, SHIFT, 33}, },
			{{-1, ERROR, 26}, {0, SHIFT, 1}, {36, SHIFT, 34}, {37, SHIFT, 35}, {43, SHIFT, 36}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 107}, },
			{{-1, ERROR, 29}, {2, SHIFT, 40}, },
			{{-1, ERROR, 30}, {5, SHIFT, 42}, {45, SHIFT, 26}, },
			{{-1, ERROR, 31}, {5, SHIFT, 45}, {45, SHIFT, 46}, },
			{{-1, ERROR, 32}, {0, SHIFT, 10}, {5, SHIFT, 48}, {45, SHIFT, 26}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 34}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 35}, {38, SHIFT, 72}, {45, SHIFT, 73}, },
			{{-1, ERROR, 36}, {1, SHIFT, 78}, {10, SHIFT, 79}, {16, SHIFT, 80}, {39, SHIFT, 81}, {45, SHIFT, 82}, },
			{{-1, ERROR, 37}, {0, SHIFT, 1}, {36, SHIFT, 34}, },
			{{-1, ERROR, 38}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 16}, {0, SHIFT, 10}, },
			{{-1, ERROR, 40}, {0, SHIFT, 1}, },
			{{-1, ERROR, 41}, {5, SHIFT, 88}, },
			{{-1, ERROR, 42}, {45, SHIFT, 90}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 44}, {5, SHIFT, 91}, {45, SHIFT, 46}, },
			{{-1, ERROR, 45}, {45, SHIFT, 92}, },
			{{-1, ERROR, 46}, {37, SHIFT, 35}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 48}, {45, SHIFT, 93}, },
			{{-1, ERROR, 49}, {5, SHIFT, 94}, {45, SHIFT, 26}, },
			{{-1, ERROR, 50}, {5, SHIFT, 96}, {45, SHIFT, 46}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 53}, {1, SHIFT, 78}, {10, SHIFT, 79}, {16, SHIFT, 80}, {39, SHIFT, 81}, {45, SHIFT, 82}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 55}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 57}, {25, SHIFT, 99}, },
			{{-1, ERROR, 58}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 59}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 60}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, REDUCE, 68}, {37, SHIFT, 103}, {39, SHIFT, 104}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 47}, {21, SHIFT, 107}, },
			{{-1, REDUCE, 49}, {20, SHIFT, 108}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 55}, {28, SHIFT, 109}, {33, SHIFT, 110}, {34, SHIFT, 111}, {35, SHIFT, 112}, },
			{{-1, REDUCE, 57}, {29, SHIFT, 113}, {30, SHIFT, 114}, },
			{{-1, REDUCE, 60}, {31, SHIFT, 115}, {32, SHIFT, 116}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 67}, {44, SHIFT, 117}, },
			{{-1, ERROR, 71}, {45, SHIFT, 118}, },
			{{-1, ERROR, 72}, {11, SHIFT, 119}, {43, SHIFT, 36}, },
			{{-1, ERROR, 73}, {43, SHIFT, 121}, },
			{{-1, ERROR, 74}, {38, SHIFT, 122}, },
			{{-1, REDUCE, 21}, {42, SHIFT, 123}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 77}, {45, SHIFT, 73}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 81}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {40, SHIFT, 126}, {45, SHIFT, 61}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 84}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 17}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 18}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 30}, {0, SHIFT, 10}, {6, SHIFT, 51}, {8, SHIFT, 129}, {12, SHIFT, 130}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {23, SHIFT, 56}, {24, SHIFT, 57}, {37, SHIFT, 60}, {45, SHIFT, 131}, },
			{{-1, ERROR, 88}, {45, SHIFT, 142}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 91}, {45, SHIFT, 143}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 94}, {45, SHIFT, 144}, },
			{{-1, ERROR, 95}, {5, SHIFT, 145}, {45, SHIFT, 46}, },
			{{-1, ERROR, 96}, {45, SHIFT, 146}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 102}, {38, SHIFT, 147}, },
			{{-1, ERROR, 103}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 148}, {45, SHIFT, 61}, },
			{{-1, ERROR, 104}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 80}, {39, SHIFT, 104}, },
			{{-1, ERROR, 107}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 108}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 109}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 110}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 111}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 112}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 113}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 114}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 115}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 116}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 118}, {37, SHIFT, 165}, },
			{{-1, ERROR, 119}, {0, SHIFT, 1}, },
			{{-1, ERROR, 120}, {11, SHIFT, 167}, },
			{{-1, ERROR, 121}, {1, SHIFT, 78}, {10, SHIFT, 79}, {16, SHIFT, 80}, {39, SHIFT, 81}, {45, SHIFT, 82}, },
			{{-1, ERROR, 122}, {11, SHIFT, 169}, {43, SHIFT, 36}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 22}, {42, SHIFT, 123}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 127}, {40, SHIFT, 171}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 10}, },
			{{-1, ERROR, 129}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 130}, {19, SHIFT, 173}, },
			{{-1, REDUCE, 68}, {36, SHIFT, 174}, {37, SHIFT, 175}, {39, SHIFT, 104}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 133}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 138}, {44, SHIFT, 117}, },
			{{-1, ERROR, 139}, {45, SHIFT, 178}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 31}, {6, SHIFT, 51}, {8, SHIFT, 129}, {12, SHIFT, 130}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {23, SHIFT, 56}, {24, SHIFT, 57}, {37, SHIFT, 60}, {45, SHIFT, 131}, },
			{{-1, ERROR, 142}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 145}, {45, SHIFT, 181}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 149}, {38, SHIFT, 182}, },
			{{-1, REDUCE, 45}, {41, SHIFT, 183}, },
			{{-1, REDUCE, 115}, },
			{{-1, ERROR, 152}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 153}, {40, SHIFT, 186}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 48}, {20, SHIFT, 108}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 56}, {29, SHIFT, 113}, {30, SHIFT, 114}, },
			{{-1, REDUCE, 52}, {28, SHIFT, 109}, },
			{{-1, REDUCE, 54}, {28, SHIFT, 109}, },
			{{-1, REDUCE, 53}, {28, SHIFT, 109}, },
			{{-1, REDUCE, 58}, {31, SHIFT, 115}, {32, SHIFT, 116}, },
			{{-1, REDUCE, 59}, {31, SHIFT, 115}, {32, SHIFT, 116}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 165}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 187}, {45, SHIFT, 61}, },
			{{-1, REDUCE, 81}, {0, SHIFT, 10}, {45, SHIFT, 189}, },
			{{-1, ERROR, 167}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 169}, {0, SHIFT, 1}, },
			{{-1, ERROR, 170}, {11, SHIFT, 193}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 172}, {17, SHIFT, 194}, },
			{{-1, ERROR, 173}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 174}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 175}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 197}, {45, SHIFT, 61}, },
			{{-1, REDUCE, 80}, {36, SHIFT, 199}, {39, SHIFT, 104}, },
			{{-1, REDUCE, 95}, {0, SHIFT, 10}, },
			{{-1, ERROR, 178}, {37, SHIFT, 200}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 90}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 46}, {41, SHIFT, 183}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 188}, {38, SHIFT, 201}, },
			{{-1, ERROR, 189}, {0, SHIFT, 1}, {36, SHIFT, 34}, {43, SHIFT, 36}, },
			{{-1, REDUCE, 85}, {45, SHIFT, 189}, },
			{{-1, REDUCE, 83}, {0, SHIFT, 10}, {45, SHIFT, 189}, },
			{{-1, REDUCE, 82}, {0, SHIFT, 10}, {45, SHIFT, 189}, },
			{{-1, ERROR, 193}, {0, SHIFT, 1}, },
			{{-1, ERROR, 194}, {0, SHIFT, 1}, },
			{{-1, ERROR, 195}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 41}, {44, REDUCE, 76}, },
			{{-1, ERROR, 198}, {38, SHIFT, 207}, },
			{{-1, ERROR, 199}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {45, SHIFT, 61}, },
			{{-1, ERROR, 200}, {6, SHIFT, 51}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, {24, SHIFT, 57}, {29, SHIFT, 58}, {30, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 209}, {45, SHIFT, 61}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 87}, {45, SHIFT, 189}, },
			{{-1, REDUCE, 86}, {45, SHIFT, 189}, },
			{{-1, REDUCE, 84}, {0, SHIFT, 10}, {45, SHIFT, 189}, },
			{{-1, REDUCE, 30}, {0, SHIFT, 10}, {6, SHIFT, 51}, {8, SHIFT, 129}, {12, SHIFT, 130}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {23, SHIFT, 56}, {24, SHIFT, 57}, {37, SHIFT, 60}, {45, SHIFT, 131}, },
			{{-1, REDUCE, 30}, {0, SHIFT, 10}, {6, SHIFT, 51}, {8, SHIFT, 129}, {12, SHIFT, 130}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {23, SHIFT, 56}, {24, SHIFT, 57}, {37, SHIFT, 60}, {45, SHIFT, 131}, },
			{{-1, REDUCE, 43}, {44, REDUCE, 78}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 42}, {44, REDUCE, 77}, },
			{{-1, ERROR, 210}, {38, SHIFT, 214}, },
			{{-1, REDUCE, 88}, {45, SHIFT, 189}, },
			{{-1, ERROR, 212}, {4, SHIFT, 215}, {5, SHIFT, 216}, },
			{{-1, ERROR, 213}, {5, SHIFT, 218}, },
			{{-1, REDUCE, 44}, {44, REDUCE, 79}, },
			{{-1, ERROR, 215}, {0, SHIFT, 1}, },
			{{-1, ERROR, 216}, {8, SHIFT, 220}, },
			{{-1, ERROR, 217}, {5, SHIFT, 221}, },
			{{-1, ERROR, 218}, {12, SHIFT, 222}, },
			{{-1, REDUCE, 30}, {0, SHIFT, 10}, {6, SHIFT, 51}, {8, SHIFT, 129}, {12, SHIFT, 130}, {13, SHIFT, 52}, {14, SHIFT, 53}, {18, SHIFT, 54}, {23, SHIFT, 56}, {24, SHIFT, 57}, {37, SHIFT, 60}, {45, SHIFT, 131}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 221}, {8, SHIFT, 224}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 39}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {5, 11}, },
			{{-1, 27}, {30, 43}, {49, 43}, {190, 43}, {202, 43}, {203, 43}, {211, 43}, },
			{{-1, 28}, {31, 47}, {44, 47}, {50, 47}, {95, 47}, },
			{{-1, 74}, },
			{{-1, 75}, {77, 124}, },
			{{-1, 83}, {53, 97}, {121, 168}, },
			{{-1, 132}, {205, 212}, {206, 213}, {219, 223}, },
			{{-1, 133}, },
			{{-1, 134}, },
			{{-1, 135}, },
			{{-1, 136}, },
			{{-1, 137}, },
			{{-1, 149}, {165, 188}, {175, 198}, {200, 210}, },
			{{-1, 150}, {34, 62}, {60, 102}, {81, 127}, {104, 153}, {129, 172}, {152, 184}, {173, 195}, {174, 196}, {199, 208}, },
			{{-1, 63}, },
			{{-1, 64}, {107, 155}, },
			{{-1, 65}, {108, 156}, },
			{{-1, 66}, {110, 158}, {111, 159}, {112, 160}, },
			{{-1, 67}, {109, 157}, },
			{{-1, 68}, {113, 161}, {114, 162}, },
			{{-1, 69}, {55, 98}, {58, 100}, {59, 101}, {115, 163}, {116, 164}, },
			{{-1, 70}, {87, 138}, {141, 138}, {205, 138}, {206, 138}, {219, 138}, },
			{{-1, 29}, },
			{{-1, 41}, },
			{{-1, 89}, },
			{{-1, 151}, {152, 185}, },
			{{-1, 105}, {106, 154}, {176, 154}, },
			{{-1, 71}, {87, 139}, {141, 139}, {205, 139}, {206, 139}, {219, 139}, },
			{{-1, 217}, },
			{{-1, 140}, {141, 179}, },
			{{-1, 37}, {72, 120}, {122, 170}, },
			{{-1, 38}, {37, 84}, },
			{{-1, 76}, {77, 125}, },
			{{-1, 14}, },
			{{-1, 7}, {9, 16}, {19, 16}, },
			{{-1, 39}, {0, 5}, {4, 8}, {9, 17}, {11, 18}, {13, 21}, {19, 23}, {22, 32}, {37, 85}, {38, 86}, {40, 87}, {84, 128}, {119, 166}, {133, 177}, {142, 180}, {167, 191}, {169, 192}, {193, 204}, {194, 205}, {195, 206}, {215, 219}, },
			{{-1, 9}, {11, 19}, },
			{{-1, 30}, {32, 49}, {166, 190}, {191, 202}, {192, 203}, {204, 211}, },
			{{-1, 31}, {30, 44}, {32, 50}, {49, 95}, },
			{{-1, 77}, },
			{{-1, 141}, },
			{{-1, 106}, {131, 176}, },
			{{-1, 152}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: newline, 'class'",
			"expecting: newline, 'begin', 'class', 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'true', int literal, '"', '(', identifier, EOF",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: newline, EOF",
			"expecting: 'inherits', 'is'",
			"expecting: newline, 'class', EOF",
			"expecting: 'from'",
			"expecting: newline",
			"expecting: 'is'",
			"expecting: newline, 'end', identifier",
			"expecting: newline, ':=', '(', ':'",
			"expecting: 'begin', 'end', identifier",
			"expecting: 'end', identifier",
			"expecting: 'begin'",
			"expecting: 'false', 'me', 'new', 'true', 'not', int literal, '"', '+', '-', '(', identifier",
			"expecting: ')', identifier",
			"expecting: 'boolean', 'int', 'string', '[', identifier",
			"expecting: newline, ':='",
			"expecting: newline, 'begin', 'end', identifier",
			"expecting: 'end'",
			"expecting: '('",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ')', ']', ',', '.'",
			"expecting: str iteral",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', '(', ')', '[', ']', ',', '.'",
			"expecting: newline, 'then', 'or', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', '&', '=', '>', '>=', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '=', '>', '>=', ')', ']', ','",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ')', ']', ','",
			"expecting: 'is', ':'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: newline, 'is', 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ':=', ')', ']', ',', ';', '.'",
			"expecting: 'false', 'me', 'new', 'true', 'not', int literal, '"', '+', '-', '(', ']', identifier",
			"expecting: newline, 'is', ':='",
			"expecting: newline, 'end', 'false', 'if', 'loop', 'me', 'new', 'true', int literal, '"', '(', identifier",
			"expecting: 'false', 'me', 'new', 'true', 'not', int literal, '"', '+', '-', '(', ')', identifier",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ':=', ')', '[', ']', ',', '.'",
			"expecting: newline, 'then', 'and', 'or', '&', '+', '-', '*', '/', '=', '>', '>=', ')', '[', ']', ',', '.'",
			"expecting: ']'",
			"expecting: 'while'",
			"expecting: ':=', '(', '[', '.'",
			"expecting: '.'",
			"expecting: 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'true', int literal, '"', '(', identifier",
			"expecting: ')', ','",
			"expecting: newline, 'then', 'and', 'or', '&', ')', ']', ','",
			"expecting: newline, 'begin', identifier",
			"expecting: 'then'",
			"expecting: ':=', '[', '.'",
			"expecting: newline, 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'true', int literal, '"', '(', identifier",
			"expecting: newline, ':=', ':'",
			"expecting: 'begin', identifier",
			"expecting: newline, '.'",
			"expecting: 'else', 'end'",
			"expecting: 'if'",
			"expecting: 'loop'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 0, 5, 4, 6, 4, 1, 4, 7, 8, 9, 4, 4, 6, 6, 4, 2, 10, 8, 6, 9, 2, 11, 12, 13, 14, 13, 13, 10, 4, 15, 16, 17, 18, 8, 19, 8, 20, 2, 12, 13, 2, 21, 13, 2, 13, 13, 22, 22, 17, 22, 15, 22, 23, 15, 15, 15, 24, 8, 25, 26, 26, 27, 28, 29, 29, 22, 2, 30, 31, 32, 33, 2, 2, 34, 34, 34, 35, 34, 36, 8, 19, 19, 37, 2, 13, 4, 2, 4, 4, 2, 13, 2, 22, 29, 22, 29, 29, 32, 38, 15, 39, 40, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 2, 21, 8, 9, 17, 30, 2, 33, 2, 34, 41, 19, 15, 42, 43, 20, 8, 8, 8, 8, 8, 44, 2, 45, 45, 8, 4, 4, 2, 4, 22, 22, 32, 46, 15, 15, 41, 39, 26, 26, 28, 47, 47, 47, 29, 29, 29, 29, 38, 48, 8, 33, 8, 9, 34, 49, 15, 15, 38, 50, 51, 21, 45, 10, 4, 22, 15, 46, 15, 39, 22, 32, 52, 53, 48, 48, 8, 8, 8, 8, 54, 32, 15, 38, 22, 53, 53, 48, 51, 37, 54, 8, 54, 32, 53, 55, 20, 54, 8, 56, 20, 57, 37, 8, 56, 8, 20, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
