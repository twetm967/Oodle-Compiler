/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AStringExpressionLvl0 extends PExpressionLvl0
{
    private TStrStart _strStart_;
    private TStrIteral _strIteral_;

    public AStringExpressionLvl0()
    {
        // Constructor
    }

    public AStringExpressionLvl0(
        @SuppressWarnings("hiding") TStrStart _strStart_,
        @SuppressWarnings("hiding") TStrIteral _strIteral_)
    {
        // Constructor
        setStrStart(_strStart_);

        setStrIteral(_strIteral_);

    }

    @Override
    public Object clone()
    {
        return new AStringExpressionLvl0(
            cloneNode(this._strStart_),
            cloneNode(this._strIteral_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStringExpressionLvl0(this);
    }

    public TStrStart getStrStart()
    {
        return this._strStart_;
    }

    public void setStrStart(TStrStart node)
    {
        if(this._strStart_ != null)
        {
            this._strStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._strStart_ = node;
    }

    public TStrIteral getStrIteral()
    {
        return this._strIteral_;
    }

    public void setStrIteral(TStrIteral node)
    {
        if(this._strIteral_ != null)
        {
            this._strIteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._strIteral_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._strStart_)
            + toString(this._strIteral_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._strStart_ == child)
        {
            this._strStart_ = null;
            return;
        }

        if(this._strIteral_ == child)
        {
            this._strIteral_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._strStart_ == oldChild)
        {
            setStrStart((TStrStart) newChild);
            return;
        }

        if(this._strIteral_ == oldChild)
        {
            setStrIteral((TStrIteral) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
