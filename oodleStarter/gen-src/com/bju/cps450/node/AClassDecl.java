/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AClassDecl extends PClassDecl
{
    private TIdentifier _start_;
    private PInheritsFrom _inheritsFrom_;
    private final LinkedList<PVarDecl> _varDecl_ = new LinkedList<PVarDecl>();
    private final LinkedList<PMethodDecl> _methodDecl_ = new LinkedList<PMethodDecl>();
    private TIdentifier _end_;

    public AClassDecl()
    {
        // Constructor
    }

    public AClassDecl(
        @SuppressWarnings("hiding") TIdentifier _start_,
        @SuppressWarnings("hiding") PInheritsFrom _inheritsFrom_,
        @SuppressWarnings("hiding") List<?> _varDecl_,
        @SuppressWarnings("hiding") List<?> _methodDecl_,
        @SuppressWarnings("hiding") TIdentifier _end_)
    {
        // Constructor
        setStart(_start_);

        setInheritsFrom(_inheritsFrom_);

        setVarDecl(_varDecl_);

        setMethodDecl(_methodDecl_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AClassDecl(
            cloneNode(this._start_),
            cloneNode(this._inheritsFrom_),
            cloneList(this._varDecl_),
            cloneList(this._methodDecl_),
            cloneNode(this._end_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassDecl(this);
    }

    public TIdentifier getStart()
    {
        return this._start_;
    }

    public void setStart(TIdentifier node)
    {
        if(this._start_ != null)
        {
            this._start_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._start_ = node;
    }

    public PInheritsFrom getInheritsFrom()
    {
        return this._inheritsFrom_;
    }

    public void setInheritsFrom(PInheritsFrom node)
    {
        if(this._inheritsFrom_ != null)
        {
            this._inheritsFrom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inheritsFrom_ = node;
    }

    public LinkedList<PVarDecl> getVarDecl()
    {
        return this._varDecl_;
    }

    public void setVarDecl(List<?> list)
    {
        for(PVarDecl e : this._varDecl_)
        {
            e.parent(null);
        }
        this._varDecl_.clear();

        for(Object obj_e : list)
        {
            PVarDecl e = (PVarDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._varDecl_.add(e);
        }
    }

    public LinkedList<PMethodDecl> getMethodDecl()
    {
        return this._methodDecl_;
    }

    public void setMethodDecl(List<?> list)
    {
        for(PMethodDecl e : this._methodDecl_)
        {
            e.parent(null);
        }
        this._methodDecl_.clear();

        for(Object obj_e : list)
        {
            PMethodDecl e = (PMethodDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._methodDecl_.add(e);
        }
    }

    public TIdentifier getEnd()
    {
        return this._end_;
    }

    public void setEnd(TIdentifier node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._start_)
            + toString(this._inheritsFrom_)
            + toString(this._varDecl_)
            + toString(this._methodDecl_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._start_ == child)
        {
            this._start_ = null;
            return;
        }

        if(this._inheritsFrom_ == child)
        {
            this._inheritsFrom_ = null;
            return;
        }

        if(this._varDecl_.remove(child))
        {
            return;
        }

        if(this._methodDecl_.remove(child))
        {
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._start_ == oldChild)
        {
            setStart((TIdentifier) newChild);
            return;
        }

        if(this._inheritsFrom_ == oldChild)
        {
            setInheritsFrom((PInheritsFrom) newChild);
            return;
        }

        for(ListIterator<PVarDecl> i = this._varDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethodDecl> i = this._methodDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethodDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._end_ == oldChild)
        {
            setEnd((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
