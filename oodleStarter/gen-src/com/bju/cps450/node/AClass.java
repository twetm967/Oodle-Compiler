/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AClass extends PClass
{
    private TClassKey _classKey_;
    private TIdentifier _left_;
    private PInheritsFrom _inheritsFrom_;
    private TIs _is_;
    private final LinkedList<TNewline> _newline_ = new LinkedList<TNewline>();
    private final LinkedList<PVarDecl> _varDecl_ = new LinkedList<PVarDecl>();
    private final LinkedList<PMethodDecl> _methodDecl_ = new LinkedList<PMethodDecl>();
    private TEnd _end_;
    private TIdentifier _right_;

    public AClass()
    {
        // Constructor
    }

    public AClass(
        @SuppressWarnings("hiding") TClassKey _classKey_,
        @SuppressWarnings("hiding") TIdentifier _left_,
        @SuppressWarnings("hiding") PInheritsFrom _inheritsFrom_,
        @SuppressWarnings("hiding") TIs _is_,
        @SuppressWarnings("hiding") List<?> _newline_,
        @SuppressWarnings("hiding") List<?> _varDecl_,
        @SuppressWarnings("hiding") List<?> _methodDecl_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TIdentifier _right_)
    {
        // Constructor
        setClassKey(_classKey_);

        setLeft(_left_);

        setInheritsFrom(_inheritsFrom_);

        setIs(_is_);

        setNewline(_newline_);

        setVarDecl(_varDecl_);

        setMethodDecl(_methodDecl_);

        setEnd(_end_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new AClass(
            cloneNode(this._classKey_),
            cloneNode(this._left_),
            cloneNode(this._inheritsFrom_),
            cloneNode(this._is_),
            cloneList(this._newline_),
            cloneList(this._varDecl_),
            cloneList(this._methodDecl_),
            cloneNode(this._end_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClass(this);
    }

    public TClassKey getClassKey()
    {
        return this._classKey_;
    }

    public void setClassKey(TClassKey node)
    {
        if(this._classKey_ != null)
        {
            this._classKey_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classKey_ = node;
    }

    public TIdentifier getLeft()
    {
        return this._left_;
    }

    public void setLeft(TIdentifier node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public PInheritsFrom getInheritsFrom()
    {
        return this._inheritsFrom_;
    }

    public void setInheritsFrom(PInheritsFrom node)
    {
        if(this._inheritsFrom_ != null)
        {
            this._inheritsFrom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inheritsFrom_ = node;
    }

    public TIs getIs()
    {
        return this._is_;
    }

    public void setIs(TIs node)
    {
        if(this._is_ != null)
        {
            this._is_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._is_ = node;
    }

    public LinkedList<TNewline> getNewline()
    {
        return this._newline_;
    }

    public void setNewline(List<?> list)
    {
        for(TNewline e : this._newline_)
        {
            e.parent(null);
        }
        this._newline_.clear();

        for(Object obj_e : list)
        {
            TNewline e = (TNewline) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._newline_.add(e);
        }
    }

    public LinkedList<PVarDecl> getVarDecl()
    {
        return this._varDecl_;
    }

    public void setVarDecl(List<?> list)
    {
        for(PVarDecl e : this._varDecl_)
        {
            e.parent(null);
        }
        this._varDecl_.clear();

        for(Object obj_e : list)
        {
            PVarDecl e = (PVarDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._varDecl_.add(e);
        }
    }

    public LinkedList<PMethodDecl> getMethodDecl()
    {
        return this._methodDecl_;
    }

    public void setMethodDecl(List<?> list)
    {
        for(PMethodDecl e : this._methodDecl_)
        {
            e.parent(null);
        }
        this._methodDecl_.clear();

        for(Object obj_e : list)
        {
            PMethodDecl e = (PMethodDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._methodDecl_.add(e);
        }
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TIdentifier getRight()
    {
        return this._right_;
    }

    public void setRight(TIdentifier node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classKey_)
            + toString(this._left_)
            + toString(this._inheritsFrom_)
            + toString(this._is_)
            + toString(this._newline_)
            + toString(this._varDecl_)
            + toString(this._methodDecl_)
            + toString(this._end_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classKey_ == child)
        {
            this._classKey_ = null;
            return;
        }

        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._inheritsFrom_ == child)
        {
            this._inheritsFrom_ = null;
            return;
        }

        if(this._is_ == child)
        {
            this._is_ = null;
            return;
        }

        if(this._newline_.remove(child))
        {
            return;
        }

        if(this._varDecl_.remove(child))
        {
            return;
        }

        if(this._methodDecl_.remove(child))
        {
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classKey_ == oldChild)
        {
            setClassKey((TClassKey) newChild);
            return;
        }

        if(this._left_ == oldChild)
        {
            setLeft((TIdentifier) newChild);
            return;
        }

        if(this._inheritsFrom_ == oldChild)
        {
            setInheritsFrom((PInheritsFrom) newChild);
            return;
        }

        if(this._is_ == oldChild)
        {
            setIs((TIs) newChild);
            return;
        }

        for(ListIterator<TNewline> i = this._newline_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TNewline) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PVarDecl> i = this._varDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethodDecl> i = this._methodDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethodDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
