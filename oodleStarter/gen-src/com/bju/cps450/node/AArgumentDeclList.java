/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AArgumentDeclList extends PArgumentDeclList
{
    private final LinkedList<PArgListHelper> _argListHelper_ = new LinkedList<PArgListHelper>();
    private PArgumentDecl _argumentDecl_;

    public AArgumentDeclList()
    {
        // Constructor
    }

    public AArgumentDeclList(
        @SuppressWarnings("hiding") List<?> _argListHelper_,
        @SuppressWarnings("hiding") PArgumentDecl _argumentDecl_)
    {
        // Constructor
        setArgListHelper(_argListHelper_);

        setArgumentDecl(_argumentDecl_);

    }

    @Override
    public Object clone()
    {
        return new AArgumentDeclList(
            cloneList(this._argListHelper_),
            cloneNode(this._argumentDecl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgumentDeclList(this);
    }

    public LinkedList<PArgListHelper> getArgListHelper()
    {
        return this._argListHelper_;
    }

    public void setArgListHelper(List<?> list)
    {
        for(PArgListHelper e : this._argListHelper_)
        {
            e.parent(null);
        }
        this._argListHelper_.clear();

        for(Object obj_e : list)
        {
            PArgListHelper e = (PArgListHelper) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._argListHelper_.add(e);
        }
    }

    public PArgumentDecl getArgumentDecl()
    {
        return this._argumentDecl_;
    }

    public void setArgumentDecl(PArgumentDecl node)
    {
        if(this._argumentDecl_ != null)
        {
            this._argumentDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argumentDecl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._argListHelper_)
            + toString(this._argumentDecl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._argListHelper_.remove(child))
        {
            return;
        }

        if(this._argumentDecl_ == child)
        {
            this._argumentDecl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PArgListHelper> i = this._argListHelper_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArgListHelper) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._argumentDecl_ == oldChild)
        {
            setArgumentDecl((PArgumentDecl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
