/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AAddExpressionLvl1 extends PExpressionLvl1
{
    private TAddition _addition_;
    private PExpressionLvl1 _expressionLvl1_;

    public AAddExpressionLvl1()
    {
        // Constructor
    }

    public AAddExpressionLvl1(
        @SuppressWarnings("hiding") TAddition _addition_,
        @SuppressWarnings("hiding") PExpressionLvl1 _expressionLvl1_)
    {
        // Constructor
        setAddition(_addition_);

        setExpressionLvl1(_expressionLvl1_);

    }

    @Override
    public Object clone()
    {
        return new AAddExpressionLvl1(
            cloneNode(this._addition_),
            cloneNode(this._expressionLvl1_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAddExpressionLvl1(this);
    }

    public TAddition getAddition()
    {
        return this._addition_;
    }

    public void setAddition(TAddition node)
    {
        if(this._addition_ != null)
        {
            this._addition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._addition_ = node;
    }

    public PExpressionLvl1 getExpressionLvl1()
    {
        return this._expressionLvl1_;
    }

    public void setExpressionLvl1(PExpressionLvl1 node)
    {
        if(this._expressionLvl1_ != null)
        {
            this._expressionLvl1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionLvl1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._addition_)
            + toString(this._expressionLvl1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._addition_ == child)
        {
            this._addition_ = null;
            return;
        }

        if(this._expressionLvl1_ == child)
        {
            this._expressionLvl1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._addition_ == oldChild)
        {
            setAddition((TAddition) newChild);
            return;
        }

        if(this._expressionLvl1_ == oldChild)
        {
            setExpressionLvl1((PExpressionLvl1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
